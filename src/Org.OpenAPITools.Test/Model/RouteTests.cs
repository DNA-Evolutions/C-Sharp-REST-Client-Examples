/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)
 *
 * The version of the OpenAPI document: 1.2.2-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing Route
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class RouteTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Route
        //private Route instance;

        public RouteTests()
        {
            // TODO uncomment below to create an instance of Route
            //instance = new Route();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Route
        /// </summary>
        [Fact]
        public void RouteInstanceTest()
        {
            // TODO uncomment below to test "IsType" Route
            //Assert.IsType<Route>(instance);
        }


        /// <summary>
        /// Test the property 'Header'
        /// </summary>
        [Fact]
        public void HeaderTest()
        {
            // TODO unit test for the property 'Header'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'ResourceId'
        /// </summary>
        [Fact]
        public void ResourceIdTest()
        {
            // TODO unit test for the property 'ResourceId'
        }
        /// <summary>
        /// Test the property 'RouteTrip'
        /// </summary>
        [Fact]
        public void RouteTripTest()
        {
            // TODO unit test for the property 'RouteTrip'
        }
        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Fact]
        public void StartTimeTest()
        {
            // TODO unit test for the property 'StartTime'
        }
        /// <summary>
        /// Test the property 'StartElementId'
        /// </summary>
        [Fact]
        public void StartElementIdTest()
        {
            // TODO unit test for the property 'StartElementId'
        }
        /// <summary>
        /// Test the property 'StartPosition'
        /// </summary>
        [Fact]
        public void StartPositionTest()
        {
            // TODO unit test for the property 'StartPosition'
        }
        /// <summary>
        /// Test the property 'EndElementId'
        /// </summary>
        [Fact]
        public void EndElementIdTest()
        {
            // TODO unit test for the property 'EndElementId'
        }
        /// <summary>
        /// Test the property 'EndPosition'
        /// </summary>
        [Fact]
        public void EndPositionTest()
        {
            // TODO unit test for the property 'EndPosition'
        }
        /// <summary>
        /// Test the property 'OptimizableElementIds'
        /// </summary>
        [Fact]
        public void OptimizableElementIdsTest()
        {
            // TODO unit test for the property 'OptimizableElementIds'
        }
        /// <summary>
        /// Test the property 'NonOptimizableElementIds'
        /// </summary>
        [Fact]
        public void NonOptimizableElementIdsTest()
        {
            // TODO unit test for the property 'NonOptimizableElementIds'
        }
        /// <summary>
        /// Test the property 'OptionalOptimizableElementIds'
        /// </summary>
        [Fact]
        public void OptionalOptimizableElementIdsTest()
        {
            // TODO unit test for the property 'OptionalOptimizableElementIds'
        }
        /// <summary>
        /// Test the property 'PillarElementIds'
        /// </summary>
        [Fact]
        public void PillarElementIdsTest()
        {
            // TODO unit test for the property 'PillarElementIds'
        }
        /// <summary>
        /// Test the property 'ElementDetails'
        /// </summary>
        [Fact]
        public void ElementDetailsTest()
        {
            // TODO unit test for the property 'ElementDetails'
        }
        /// <summary>
        /// Test the property 'PillarLatestEffectiveArrivalOffsetMap'
        /// </summary>
        [Fact]
        public void PillarLatestEffectiveArrivalOffsetMapTest()
        {
            // TODO unit test for the property 'PillarLatestEffectiveArrivalOffsetMap'
        }
        /// <summary>
        /// Test the property 'Flags'
        /// </summary>
        [Fact]
        public void FlagsTest()
        {
            // TODO unit test for the property 'Flags'
        }
        /// <summary>
        /// Test the property 'AdditionalRouteStartOffset'
        /// </summary>
        [Fact]
        public void AdditionalRouteStartOffsetTest()
        {
            // TODO unit test for the property 'AdditionalRouteStartOffset'
        }
        /// <summary>
        /// Test the property 'IsFinalized'
        /// </summary>
        [Fact]
        public void IsFinalizedTest()
        {
            // TODO unit test for the property 'IsFinalized'
        }
        /// <summary>
        /// Test the property 'IsInactive'
        /// </summary>
        [Fact]
        public void IsInactiveTest()
        {
            // TODO unit test for the property 'IsInactive'
        }
        /// <summary>
        /// Test the property 'IsLockedDown'
        /// </summary>
        [Fact]
        public void IsLockedDownTest()
        {
            // TODO unit test for the property 'IsLockedDown'
        }

    }

}
