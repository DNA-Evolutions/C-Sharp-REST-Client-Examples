/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)
 *
 * The version of the OpenAPI document: 1.2.2-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing ConstraintType
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ConstraintTypeTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ConstraintType
        //private ConstraintType instance;

        public ConstraintTypeTests()
        {
            // TODO uncomment below to create an instance of ConstraintType
            //instance = new ConstraintType();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConstraintType
        /// </summary>
        [Fact]
        public void ConstraintTypeInstanceTest()
        {
            // TODO uncomment below to test "IsType" ConstraintType
            //Assert.IsType<ConstraintType>(instance);
        }

        /// <summary>
        /// Test deserialize a AbsoluteNodeColorMultiRouteConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void AbsoluteNodeColorMultiRouteConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a AbsoluteNodeColorMultiRouteConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new AbsoluteNodeColorMultiRouteConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a BindingResourceConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void BindingResourceConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a BindingResourceConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new BindingResourceConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ConnectedConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void ConnectedConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a ConnectedConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new ConnectedConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ExcludingResourceConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void ExcludingResourceConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a ExcludingResourceConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new ExcludingResourceConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a NodeColorMultiRouteConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void NodeColorMultiRouteConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a NodeColorMultiRouteConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new NodeColorMultiRouteConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ResourceLocationConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void ResourceLocationConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a ResourceLocationConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new ResourceLocationConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TypeConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void TypeConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a TypeConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new TypeConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TypeWithExpertiseConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void TypeWithExpertiseConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a TypeWithExpertiseConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new TypeWithExpertiseConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a UKPostCodeConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void UKPostCodeConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a UKPostCodeConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new UKPostCodeConstraint().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ZoneNumberConstraint from type ConstraintType
        /// </summary>
        [Fact]
        public void ZoneNumberConstraintDeserializeFromConstraintTypeTest()
        {
            // TODO uncomment below to test deserialize a ZoneNumberConstraint from type ConstraintType
            //Assert.IsType<ConstraintType>(JsonConvert.DeserializeObject<ConstraintType>(new ZoneNumberConstraint().ToJson()));
        }

        /// <summary>
        /// Test the property 'TypeName'
        /// </summary>
        [Fact]
        public void TypeNameTest()
        {
            // TODO unit test for the property 'TypeName'
        }

    }

}
