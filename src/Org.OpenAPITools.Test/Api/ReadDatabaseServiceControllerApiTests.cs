/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)
 *
 * The version of the OpenAPI document: 1.2.2-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ReadDatabaseServiceControllerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReadDatabaseServiceControllerApiTests : IDisposable
    {
        private ReadDatabaseServiceControllerApi instance;

        public ReadDatabaseServiceControllerApiTests()
        {
            instance = new ReadDatabaseServiceControllerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ReadDatabaseServiceControllerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ReadDatabaseServiceControllerApi
            //Assert.IsType<ReadDatabaseServiceControllerApi>(instance);
        }

        /// <summary>
        /// Test FindError
        /// </summary>
        [Fact]
        public void FindErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseInfoSearch databaseInfoSearch = null;
            //var response = instance.FindError(databaseInfoSearch);
            //Assert.IsType<List<JOptOptimizationError>>(response);
        }

        /// <summary>
        /// Test FindOptimization
        /// </summary>
        [Fact]
        public void FindOptimizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseItemSearch databaseItemSearch = null;
            //var response = instance.FindOptimization(databaseItemSearch);
            //Assert.IsType<RestOptimization>(response);
        }

        /// <summary>
        /// Test FindProgress
        /// </summary>
        [Fact]
        public void FindProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseInfoSearch databaseInfoSearch = null;
            //var response = instance.FindProgress(databaseInfoSearch);
            //Assert.IsType<List<JOptOptimizationProgress>>(response);
        }

        /// <summary>
        /// Test FindSolution
        /// </summary>
        [Fact]
        public void FindSolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseItemSearch databaseItemSearch = null;
            //var response = instance.FindSolution(databaseItemSearch);
            //Assert.IsType<Solution>(response);
        }

        /// <summary>
        /// Test FindStatus
        /// </summary>
        [Fact]
        public void FindStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseInfoSearch databaseInfoSearch = null;
            //var response = instance.FindStatus(databaseInfoSearch);
            //Assert.IsType<List<JOptOptimizationStatus>>(response);
        }

        /// <summary>
        /// Test FindWarning
        /// </summary>
        [Fact]
        public void FindWarningTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseInfoSearch databaseInfoSearch = null;
            //var response = instance.FindWarning(databaseInfoSearch);
            //Assert.IsType<List<JOptOptimizationWarning>>(response);
        }

        /// <summary>
        /// Test FindsOptimizationInfos
        /// </summary>
        [Fact]
        public void FindsOptimizationInfosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseInfoSearch databaseInfoSearch = null;
            //var response = instance.FindsOptimizationInfos(databaseInfoSearch);
            //Assert.IsType<List<DatabaseInfoSearchResult>>(response);
        }

        /// <summary>
        /// Test FindsSolutionInfos
        /// </summary>
        [Fact]
        public void FindsSolutionInfosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DatabaseInfoSearch databaseInfoSearch = null;
            //var response = instance.FindsSolutionInfos(databaseInfoSearch);
            //Assert.IsType<List<DatabaseInfoSearchResult>>(response);
        }
    }
}
