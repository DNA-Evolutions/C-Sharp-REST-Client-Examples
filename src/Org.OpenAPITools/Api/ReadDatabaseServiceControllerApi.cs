/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)
 *
 * The version of the OpenAPI document: 1.2.2-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReadDatabaseServiceControllerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find error by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find error by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationError&gt;</returns>
        List<JOptOptimizationError> FindError(DatabaseInfoSearch databaseInfoSearch);

        /// <summary>
        /// Find error by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find error by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationError&gt;</returns>
        ApiResponse<List<JOptOptimizationError>> FindErrorWithHttpInfo(DatabaseInfoSearch databaseInfoSearch);
        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimizations by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>RestOptimization</returns>
        RestOptimization FindOptimization(DatabaseItemSearch databaseItemSearch);

        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimizations by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>ApiResponse of RestOptimization</returns>
        ApiResponse<RestOptimization> FindOptimizationWithHttpInfo(DatabaseItemSearch databaseItemSearch);
        /// <summary>
        /// Find progress by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find progress by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationProgress&gt;</returns>
        List<JOptOptimizationProgress> FindProgress(DatabaseInfoSearch databaseInfoSearch);

        /// <summary>
        /// Find progress by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find progress by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationProgress&gt;</returns>
        ApiResponse<List<JOptOptimizationProgress>> FindProgressWithHttpInfo(DatabaseInfoSearch databaseInfoSearch);
        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solutions by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>Solution</returns>
        Solution FindSolution(DatabaseItemSearch databaseItemSearch);

        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solutions by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>ApiResponse of Solution</returns>
        ApiResponse<Solution> FindSolutionWithHttpInfo(DatabaseItemSearch databaseItemSearch);
        /// <summary>
        /// Find status by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find status by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationStatus&gt;</returns>
        List<JOptOptimizationStatus> FindStatus(DatabaseInfoSearch databaseInfoSearch);

        /// <summary>
        /// Find status by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find status by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationStatus&gt;</returns>
        ApiResponse<List<JOptOptimizationStatus>> FindStatusWithHttpInfo(DatabaseInfoSearch databaseInfoSearch);
        /// <summary>
        /// Find warning by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find warning by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationWarning&gt;</returns>
        List<JOptOptimizationWarning> FindWarning(DatabaseInfoSearch databaseInfoSearch);

        /// <summary>
        /// Find warning by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find warning by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationWarning&gt;</returns>
        ApiResponse<List<JOptOptimizationWarning>> FindWarningWithHttpInfo(DatabaseInfoSearch databaseInfoSearch);
        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimization-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;DatabaseInfoSearchResult&gt;</returns>
        List<DatabaseInfoSearchResult> FindsOptimizationInfos(DatabaseInfoSearch databaseInfoSearch);

        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimization-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;DatabaseInfoSearchResult&gt;</returns>
        ApiResponse<List<DatabaseInfoSearchResult>> FindsOptimizationInfosWithHttpInfo(DatabaseInfoSearch databaseInfoSearch);
        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solution-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;DatabaseInfoSearchResult&gt;</returns>
        List<DatabaseInfoSearchResult> FindsSolutionInfos(DatabaseInfoSearch databaseInfoSearch);

        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solution-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;DatabaseInfoSearchResult&gt;</returns>
        ApiResponse<List<DatabaseInfoSearchResult>> FindsSolutionInfosWithHttpInfo(DatabaseInfoSearch databaseInfoSearch);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReadDatabaseServiceControllerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find error by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find error by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationError&gt;</returns>
        System.Threading.Tasks.Task<List<JOptOptimizationError>> FindErrorAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find error by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find error by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationError&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JOptOptimizationError>>> FindErrorWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimizations by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOptimization</returns>
        System.Threading.Tasks.Task<RestOptimization> FindOptimizationAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimizations by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOptimization)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestOptimization>> FindOptimizationWithHttpInfoAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find progress by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find progress by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationProgress&gt;</returns>
        System.Threading.Tasks.Task<List<JOptOptimizationProgress>> FindProgressAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find progress by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find progress by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationProgress&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JOptOptimizationProgress>>> FindProgressWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solutions by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        System.Threading.Tasks.Task<Solution> FindSolutionAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solutions by creator and id.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Solution>> FindSolutionWithHttpInfoAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find status by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find status by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationStatus&gt;</returns>
        System.Threading.Tasks.Task<List<JOptOptimizationStatus>> FindStatusAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find status by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find status by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JOptOptimizationStatus>>> FindStatusWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find warning by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find warning by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationWarning&gt;</returns>
        System.Threading.Tasks.Task<List<JOptOptimizationWarning>> FindWarningAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find warning by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find warning by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationWarning&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JOptOptimizationWarning>>> FindWarningWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimization-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatabaseInfoSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<DatabaseInfoSearchResult>> FindsOptimizationInfosAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find optimization-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatabaseInfoSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatabaseInfoSearchResult>>> FindsOptimizationInfosWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solution-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatabaseInfoSearchResult&gt;</returns>
        System.Threading.Tasks.Task<List<DatabaseInfoSearchResult>> FindsSolutionInfosAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database.
        /// </summary>
        /// <remarks>
        /// Find solution-infos by creator.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatabaseInfoSearchResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DatabaseInfoSearchResult>>> FindsSolutionInfosWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReadDatabaseServiceControllerApi : IReadDatabaseServiceControllerApiSync, IReadDatabaseServiceControllerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReadDatabaseServiceControllerApi : IDisposable, IReadDatabaseServiceControllerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ReadDatabaseServiceControllerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ReadDatabaseServiceControllerApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ReadDatabaseServiceControllerApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReadDatabaseServiceControllerApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReadDatabaseServiceControllerApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReadDatabaseServiceControllerApi(HttpClient client, Org.OpenAPITools.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Org.OpenAPITools.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReadDatabaseServiceControllerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ReadDatabaseServiceControllerApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Org.OpenAPITools.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find error by creator. Only works, if connected to a database. Find error by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationError&gt;</returns>
        public List<JOptOptimizationError> FindError(DatabaseInfoSearch databaseInfoSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationError>> localVarResponse = FindErrorWithHttpInfo(databaseInfoSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find error by creator. Only works, if connected to a database. Find error by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationError&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationError>> FindErrorWithHttpInfo(DatabaseInfoSearch databaseInfoSearch)
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindError");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JOptOptimizationError>>("/api/db/read/findError", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find error by creator. Only works, if connected to a database. Find error by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationError&gt;</returns>
        public async System.Threading.Tasks.Task<List<JOptOptimizationError>> FindErrorAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationError>> localVarResponse = await FindErrorWithHttpInfoAsync(databaseInfoSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find error by creator. Only works, if connected to a database. Find error by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationError&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationError>>> FindErrorWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindError");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream",
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JOptOptimizationError>>("/api/db/read/findError", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database. Find optimizations by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>RestOptimization</returns>
        public RestOptimization FindOptimization(DatabaseItemSearch databaseItemSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<RestOptimization> localVarResponse = FindOptimizationWithHttpInfo(databaseItemSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database. Find optimizations by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>ApiResponse of RestOptimization</returns>
        public Org.OpenAPITools.Client.ApiResponse<RestOptimization> FindOptimizationWithHttpInfo(DatabaseItemSearch databaseItemSearch)
        {
            // verify the required parameter 'databaseItemSearch' is set
            if (databaseItemSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseItemSearch' when calling ReadDatabaseServiceControllerApi->FindOptimization");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseItemSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestOptimization>("/api/db/read/findOptimization", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOptimization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database. Find optimizations by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOptimization</returns>
        public async System.Threading.Tasks.Task<RestOptimization> FindOptimizationAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RestOptimization> localVarResponse = await FindOptimizationWithHttpInfoAsync(databaseItemSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find optimizations by creator and id. Only works, if connected to a database. Find optimizations by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOptimization)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RestOptimization>> FindOptimizationWithHttpInfoAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseItemSearch' is set
            if (databaseItemSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseItemSearch' when calling ReadDatabaseServiceControllerApi->FindOptimization");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseItemSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RestOptimization>("/api/db/read/findOptimization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOptimization", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find progress by creator. Only works, if connected to a database. Find progress by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationProgress&gt;</returns>
        public List<JOptOptimizationProgress> FindProgress(DatabaseInfoSearch databaseInfoSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationProgress>> localVarResponse = FindProgressWithHttpInfo(databaseInfoSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find progress by creator. Only works, if connected to a database. Find progress by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationProgress&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationProgress>> FindProgressWithHttpInfo(DatabaseInfoSearch databaseInfoSearch)
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindProgress");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JOptOptimizationProgress>>("/api/db/read/findProgress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find progress by creator. Only works, if connected to a database. Find progress by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationProgress&gt;</returns>
        public async System.Threading.Tasks.Task<List<JOptOptimizationProgress>> FindProgressAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationProgress>> localVarResponse = await FindProgressWithHttpInfoAsync(databaseInfoSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find progress by creator. Only works, if connected to a database. Find progress by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationProgress&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationProgress>>> FindProgressWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindProgress");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream",
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JOptOptimizationProgress>>("/api/db/read/findProgress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database. Find solutions by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>Solution</returns>
        public Solution FindSolution(DatabaseItemSearch databaseItemSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<Solution> localVarResponse = FindSolutionWithHttpInfo(databaseItemSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database. Find solutions by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <returns>ApiResponse of Solution</returns>
        public Org.OpenAPITools.Client.ApiResponse<Solution> FindSolutionWithHttpInfo(DatabaseItemSearch databaseItemSearch)
        {
            // verify the required parameter 'databaseItemSearch' is set
            if (databaseItemSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseItemSearch' when calling ReadDatabaseServiceControllerApi->FindSolution");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseItemSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Solution>("/api/db/read/findSolution", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSolution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database. Find solutions by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Solution</returns>
        public async System.Threading.Tasks.Task<Solution> FindSolutionAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Solution> localVarResponse = await FindSolutionWithHttpInfoAsync(databaseItemSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find solutions by creator and id. Only works, if connected to a database. Find solutions by creator and id.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseItemSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Solution)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Solution>> FindSolutionWithHttpInfoAsync(DatabaseItemSearch databaseItemSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseItemSearch' is set
            if (databaseItemSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseItemSearch' when calling ReadDatabaseServiceControllerApi->FindSolution");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseItemSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Solution>("/api/db/read/findSolution", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSolution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find status by creator. Only works, if connected to a database. Find status by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationStatus&gt;</returns>
        public List<JOptOptimizationStatus> FindStatus(DatabaseInfoSearch databaseInfoSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationStatus>> localVarResponse = FindStatusWithHttpInfo(databaseInfoSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find status by creator. Only works, if connected to a database. Find status by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationStatus&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationStatus>> FindStatusWithHttpInfo(DatabaseInfoSearch databaseInfoSearch)
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindStatus");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/event-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JOptOptimizationStatus>>("/api/db/read/findStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find status by creator. Only works, if connected to a database. Find status by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<JOptOptimizationStatus>> FindStatusAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationStatus>> localVarResponse = await FindStatusWithHttpInfoAsync(databaseInfoSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find status by creator. Only works, if connected to a database. Find status by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationStatus>>> FindStatusWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindStatus");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/event-stream"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JOptOptimizationStatus>>("/api/db/read/findStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find warning by creator. Only works, if connected to a database. Find warning by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;JOptOptimizationWarning&gt;</returns>
        public List<JOptOptimizationWarning> FindWarning(DatabaseInfoSearch databaseInfoSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationWarning>> localVarResponse = FindWarningWithHttpInfo(databaseInfoSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find warning by creator. Only works, if connected to a database. Find warning by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;JOptOptimizationWarning&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationWarning>> FindWarningWithHttpInfo(DatabaseInfoSearch databaseInfoSearch)
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindWarning");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/event-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<JOptOptimizationWarning>>("/api/db/read/findWarning", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindWarning", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find warning by creator. Only works, if connected to a database. Find warning by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JOptOptimizationWarning&gt;</returns>
        public async System.Threading.Tasks.Task<List<JOptOptimizationWarning>> FindWarningAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationWarning>> localVarResponse = await FindWarningWithHttpInfoAsync(databaseInfoSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find warning by creator. Only works, if connected to a database. Find warning by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JOptOptimizationWarning&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<JOptOptimizationWarning>>> FindWarningWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindWarning");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/event-stream"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<JOptOptimizationWarning>>("/api/db/read/findWarning", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindWarning", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database. Find optimization-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;DatabaseInfoSearchResult&gt;</returns>
        public List<DatabaseInfoSearchResult> FindsOptimizationInfos(DatabaseInfoSearch databaseInfoSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>> localVarResponse = FindsOptimizationInfosWithHttpInfo(databaseInfoSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database. Find optimization-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;DatabaseInfoSearchResult&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>> FindsOptimizationInfosWithHttpInfo(DatabaseInfoSearch databaseInfoSearch)
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindsOptimizationInfos");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/event-stream"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DatabaseInfoSearchResult>>("/api/db/read/findsOptimizationInfos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindsOptimizationInfos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database. Find optimization-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatabaseInfoSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatabaseInfoSearchResult>> FindsOptimizationInfosAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>> localVarResponse = await FindsOptimizationInfosWithHttpInfoAsync(databaseInfoSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find optimization-infos by creator. Only works, if connected to a database. Find optimization-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatabaseInfoSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>>> FindsOptimizationInfosWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindsOptimizationInfos");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/event-stream"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DatabaseInfoSearchResult>>("/api/db/read/findsOptimizationInfos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindsOptimizationInfos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database. Find solution-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>List&lt;DatabaseInfoSearchResult&gt;</returns>
        public List<DatabaseInfoSearchResult> FindsSolutionInfos(DatabaseInfoSearch databaseInfoSearch)
        {
            Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>> localVarResponse = FindsSolutionInfosWithHttpInfo(databaseInfoSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database. Find solution-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <returns>ApiResponse of List&lt;DatabaseInfoSearchResult&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>> FindsSolutionInfosWithHttpInfo(DatabaseInfoSearch databaseInfoSearch)
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindsSolutionInfos");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream",
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DatabaseInfoSearchResult>>("/api/db/read/findsSolutionInfos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindsSolutionInfos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database. Find solution-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DatabaseInfoSearchResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<DatabaseInfoSearchResult>> FindsSolutionInfosAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>> localVarResponse = await FindsSolutionInfosWithHttpInfoAsync(databaseInfoSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find solution-infos by creator. Only works, if connected to a database. Find solution-infos by creator.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="databaseInfoSearch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DatabaseInfoSearchResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<DatabaseInfoSearchResult>>> FindsSolutionInfosWithHttpInfoAsync(DatabaseInfoSearch databaseInfoSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'databaseInfoSearch' is set
            if (databaseInfoSearch == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'databaseInfoSearch' when calling ReadDatabaseServiceControllerApi->FindsSolutionInfos");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/event-stream",
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = databaseInfoSearch;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DatabaseInfoSearchResult>>("/api/db/read/findsSolutionInfos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindsSolutionInfos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
