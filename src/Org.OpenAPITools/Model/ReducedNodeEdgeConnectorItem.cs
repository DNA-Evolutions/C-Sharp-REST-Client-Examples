/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc3-j17-SNAPSHOT)
 *
 * The version of the OpenAPI document: unknown
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The list of hook connections
    /// </summary>
    [DataContract(Name = "ReducedNodeEdgeConnectorItem")]
    public partial class ReducedNodeEdgeConnectorItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReducedNodeEdgeConnectorItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReducedNodeEdgeConnectorItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReducedNodeEdgeConnectorItem" /> class.
        /// </summary>
        /// <param name="distance">The distance of the hook connection. (required).</param>
        /// <param name="time">The time needed to pass the hook connection. (required).</param>
        /// <param name="fromElementId">The fromElementId defines the element where the connections starts. (required).</param>
        /// <param name="toElementId">The toElementId defines the element where the connections ends. (required).</param>
        public ReducedNodeEdgeConnectorItem(string distance = default(string), string time = default(string), string fromElementId = default(string), string toElementId = default(string))
        {
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for ReducedNodeEdgeConnectorItem and cannot be null");
            }
            this.Distance = distance;
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new ArgumentNullException("time is a required property for ReducedNodeEdgeConnectorItem and cannot be null");
            }
            this.Time = time;
            // to ensure "fromElementId" is required (not null)
            if (fromElementId == null)
            {
                throw new ArgumentNullException("fromElementId is a required property for ReducedNodeEdgeConnectorItem and cannot be null");
            }
            this.FromElementId = fromElementId;
            // to ensure "toElementId" is required (not null)
            if (toElementId == null)
            {
                throw new ArgumentNullException("toElementId is a required property for ReducedNodeEdgeConnectorItem and cannot be null");
            }
            this.ToElementId = toElementId;
        }

        /// <summary>
        /// The distance of the hook connection.
        /// </summary>
        /// <value>The distance of the hook connection.</value>
        /*
        <example>100.0 km</example>
        */
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public string Distance { get; set; }

        /// <summary>
        /// The time needed to pass the hook connection.
        /// </summary>
        /// <value>The time needed to pass the hook connection.</value>
        /*
        <example>PT30M</example>
        */
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public string Time { get; set; }

        /// <summary>
        /// The fromElementId defines the element where the connections starts.
        /// </summary>
        /// <value>The fromElementId defines the element where the connections starts.</value>
        /*
        <example>MyStartElementId</example>
        */
        [DataMember(Name = "fromElementId", IsRequired = true, EmitDefaultValue = true)]
        public string FromElementId { get; set; }

        /// <summary>
        /// The toElementId defines the element where the connections ends.
        /// </summary>
        /// <value>The toElementId defines the element where the connections ends.</value>
        /*
        <example>MyToElementId</example>
        */
        [DataMember(Name = "toElementId", IsRequired = true, EmitDefaultValue = true)]
        public string ToElementId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReducedNodeEdgeConnectorItem {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  FromElementId: ").Append(FromElementId).Append("\n");
            sb.Append("  ToElementId: ").Append(ToElementId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
