/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc2-j17)
 *
 * The version of the OpenAPI document: 1.2.8-alpha-SNAPSHOT)
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The Load type that can contain different loads
    /// </summary>
    [DataContract(Name = "ILoad")]
    [JsonConverter(typeof(JsonSubtypes), "TypeName")]
    [JsonSubtypes.KnownSubType(typeof(MixedFlexLoad), "MixedFlexLoad")]
    [JsonSubtypes.KnownSubType(typeof(RequestFlexLoad), "RequestFlexLoad")]
    [JsonSubtypes.KnownSubType(typeof(SimpleLoad), "SimpleLoad")]
    [JsonSubtypes.KnownSubType(typeof(SupplyFlexLoad), "SupplyFlexLoad")]
    [JsonSubtypes.KnownSubType(typeof(UnloadAllLoad), "UnloadAllLoad")]
    public partial class ILoad : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ILoad" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ILoad() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ILoad" /> class.
        /// </summary>
        /// <param name="priority">priority.</param>
        /// <param name="loadValue">loadValue.</param>
        /// <param name="fuzzyVisit">fuzzyVisit.</param>
        /// <param name="request">request.</param>
        /// <param name="id">id.</param>
        /// <param name="typeName">typeName (required).</param>
        public ILoad(int priority = default(int), double loadValue = default(double), bool fuzzyVisit = default(bool), bool request = default(bool), string id = default(string), string typeName = default(string))
        {
            // to ensure "typeName" is required (not null)
            if (typeName == null)
            {
                throw new ArgumentNullException("typeName is a required property for ILoad and cannot be null");
            }
            this.TypeName = typeName;
            this.Priority = priority;
            this.LoadValue = loadValue;
            this.FuzzyVisit = fuzzyVisit;
            this.Request = request;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets LoadValue
        /// </summary>
        [DataMember(Name = "loadValue", EmitDefaultValue = false)]
        public double LoadValue { get; set; }

        /// <summary>
        /// Gets or Sets FuzzyVisit
        /// </summary>
        [DataMember(Name = "fuzzyVisit", EmitDefaultValue = true)]
        public bool FuzzyVisit { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "request", EmitDefaultValue = true)]
        public bool Request { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name = "typeName", IsRequired = true, EmitDefaultValue = true)]
        public string TypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ILoad {\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  LoadValue: ").Append(LoadValue).Append("\n");
            sb.Append("  FuzzyVisit: ").Append(FuzzyVisit).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
