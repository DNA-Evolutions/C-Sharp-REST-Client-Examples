/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-SNAPSHOT)
 *
 * The version of the OpenAPI document: 1.2.1-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The status of the optimization
    /// </summary>
    [DataContract(Name = "OptimizationStatus")]
    public partial class OptimizationStatus : IEquatable<OptimizationStatus>, IValidatableObject
    {
        /// <summary>
        /// The status of the optimization
        /// </summary>
        /// <value>The status of the optimization</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 2,

            /// <summary>
            /// Enum SUCCESSWITHSOLUTION for value: SUCCESS_WITH_SOLUTION
            /// </summary>
            [EnumMember(Value = "SUCCESS_WITH_SOLUTION")]
            SUCCESSWITHSOLUTION = 3,

            /// <summary>
            /// Enum SUCCESSWITHOUTSOLUTION for value: SUCCESS_WITHOUT_SOLUTION
            /// </summary>
            [EnumMember(Value = "SUCCESS_WITHOUT_SOLUTION")]
            SUCCESSWITHOUTSOLUTION = 4

        }


        /// <summary>
        /// The status of the optimization
        /// </summary>
        /// <value>The status of the optimization</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptimizationStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimizationStatus" /> class.
        /// </summary>
        /// <param name="statusDescription">The description of status of the optimization (required).</param>
        /// <param name="error">An  error code/desciption (required).</param>
        /// <param name="status">The status of the optimization (required).</param>
        public OptimizationStatus(string statusDescription = default(string), string error = default(string), StatusEnum status = default(StatusEnum))
        {
            // to ensure "statusDescription" is required (not null)
            if (statusDescription == null)
            {
                throw new ArgumentNullException("statusDescription is a required property for OptimizationStatus and cannot be null");
            }
            this.StatusDescription = statusDescription;
            // to ensure "error" is required (not null)
            if (error == null)
            {
                throw new ArgumentNullException("error is a required property for OptimizationStatus and cannot be null");
            }
            this.Error = error;
            this.Status = status;
        }

        /// <summary>
        /// The description of status of the optimization
        /// </summary>
        /// <value>The description of status of the optimization</value>
        [DataMember(Name = "statusDescription", IsRequired = true, EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// An  error code/desciption
        /// </summary>
        /// <value>An  error code/desciption</value>
        [DataMember(Name = "error", IsRequired = true, EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptimizationStatus {\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimizationStatus);
        }

        /// <summary>
        /// Returns true if OptimizationStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimizationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimizationStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
