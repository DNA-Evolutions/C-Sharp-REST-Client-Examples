/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-SNAPSHOT)
 *
 * The version of the OpenAPI document: 1.2.1-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The list of resoruces
    /// </summary>
    [DataContract(Name = "Resource")]
    public partial class Resource : IEquatable<Resource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Resource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource" /> class.
        /// </summary>
        /// <param name="id">The unique id of the Resource. It is not possible, to create mutliple elements (also Nodes) with the same id. (required).</param>
        /// <param name="locationId">The location id can relate a Resouce to the connection of another resource. See also locationId of Node..</param>
        /// <param name="type">type (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="workingHours">The list of non-overlapping workingHours. (required).</param>
        /// <param name="maxTime">The maxTime. The maximal time a Resource should work within the WorkingHour. This value is NOT logically coupled to the workingHours. For example, a working hour is defined from 8 in the morning till  5 in the afternoon and the maxTime is defined as 4 hours. In this situation an overime violation will be already  generated  when the Resource works from 8 till 1 (one hour of overtime). As JOpt supports flexible start times, the Resource might work from 12-4 (4 hours &#x3D;&gt; not violation). The workingHour itself should be seen as a frame that is used primarily for matching WokingHours of Resources and OpeningHours of nodes. If no flexTime is used, the Resource will always start working at the beginning of its current working hours. (required).</param>
        /// <param name="maxDistance">The maxDistance. The maximal distance a Resource is allowed to drive within a certain working hours. (required).</param>
        /// <param name="destinationPosition">destinationPosition.</param>
        /// <param name="stayOutDefinition">stayOutDefinition.</param>
        /// <param name="stayOutCycleDefinition">stayOutCycleDefinition.</param>
        /// <param name="stayOutPolicyTime">The stayOutPolicyTime.</param>
        /// <param name="stayOutPolicyDistance">The stayOutPolicyDistance.</param>
        /// <param name="capacity">The capacity.</param>
        /// <param name="initialLoad">The initialLoad.</param>
        /// <param name="minDegratedCapacity">The minDegratedCapacity.</param>
        /// <param name="capacityDegPerStop">The capacityDegPerStop.</param>
        /// <param name="startReductionTimeDefinition">startReductionTimeDefinition.</param>
        /// <param name="startReductionTimePillarDefinition">startReductionTimePillarDefinition.</param>
        /// <param name="startReductionTimeIncludeDefinition">startReductionTimeIncludeDefinition.</param>
        /// <param name="flexTime">The local flexible time. In some cases a Resource should start working later compared to what is defined in the working hours. This way idle time can be reduced. The local flex time is the maximum a Resource is allowed to start working later, depending on the Optimization maybe flex time is not or only partially used..</param>
        /// <param name="postFlexTime">The postFlexTime.</param>
        /// <param name="postFlexTimeOnlyOnOvertime">The post flextime is only applied to reduce overtime. (default to false).</param>
        /// <param name="maxPillarAfterHoursTime">The maxPillarAfterHoursTime.</param>
        /// <param name="maxDriveTimeFirstNode">The maxDriveTimeFirstNode.</param>
        /// <param name="maxDriveDistanceFirstNode">The maxDriveDistanceFirstNode.</param>
        /// <param name="maxDriveTimeLastNode">The maxDriveTimeLastNode.</param>
        /// <param name="maxDriveDistanceLastNode">The maxDriveDistanceLastNode.</param>
        /// <param name="kilometerCost">The kilometerCost defines how much arbitrary cost arises per kilometer driven..</param>
        /// <param name="hourCost">The hourCost defines how much arbitrary cost arises per hour scheduled (idling, working, driving)..</param>
        /// <param name="fixCost">The fixCost defines an abstract cost that arrises when this node is visited..</param>
        /// <param name="preWorkDrivingTime">The preWorkDrivingTime.  Use startReductionTimeDefinition instead..</param>
        /// <param name="skillEfficiencyFactor">The skillEfficiencyFactor.</param>
        /// <param name="acceptableOvertime">The acceptableOvertime. By default if nodes are constantly leading to overtime for a resource, at some point they might get unassigned (if AutoFilter is activated). The acceptable overtime assigns a margin to avoid filtering nodes if they lead to overtime below this margin. By defaul the property  &#39;JoptAutoFilterWorkingHoursExceedMargin&#39; can be used to globally define this value..</param>
        /// <param name="strictOvertime">The strictOvertime. By default if nodes are constantly leading to overtime for a resource, at some point they might get unassigned (if AutoFilter is activated). The strictOvertime overtime assigns a margin to avoid filtering nodes if they lead to overtime below this margin. By defaul the property  &#39;JoptAutoFilterWorkingHoursStrictExceedMargin&#39; can be used to globally define this value. In contrast to acceptable  overtime, the strict overtime is used during the last fitlering step of the AutoFilter (if strict mode is enabled)..</param>
        /// <param name="acceptableOverdistance">The acceptableOverdistance. Like acceptableOvertime for distance..</param>
        /// <param name="strictOverdistance">The strictOverdistance. Like strictOvertime for distance..</param>
        /// <param name="averageSpeed">The averageSpeed of the Resource. By default this value is set to be 22[m/s] (79.2[km/h]). This value is mainly used, in case no external node connections are provided..</param>
        /// <param name="qualifications">The qualifications of the Resource..</param>
        /// <param name="constraints">The constraints  of the Resource.</param>
        /// <param name="connectionTimeEfficiencyFactor">The connectionTimeEfficiencyFactor. The default time for passing a connection is devided by this factor. For example, if a connections needs 30 minutes to be passed by default, a Resource with a connectionTimeEfficiencyFactor of 1.5 only needs 20 minutes. By default this factor is one. (default to 1.0D).</param>
        /// <param name="co2emissionFactor">The co2emissionFactor..</param>
        /// <param name="resourceDepot">resourceDepot.</param>
        /// <param name="overallVisitDurationEfficiency">The overallVisitDurationEfficiency. The base duration a Resource spends at a node is devided by this factor. For example, if a node has 30 minutes of visit duration assigned, a Resource with a overallVisitDurationEfficiency of 1.5 only needs 20 minutes. By default this factor is one. (default to 1.0D).</param>
        /// <param name="isReductionTimeOnlyUsedForDriving">The isReductionTimeOnlyUsedForDriving. Use startReductionTimeDefinition instead. (default to false).</param>
        /// <param name="isReductionTimeIncludedInTotalWorkingTime">The isReductionTimeIncludedInTotalWorkingTime. Use StartReductionTimeIncludeDefinition instead (default to false).</param>
        public Resource(string id = default(string), string locationId = default(string), ResourceType type = default(ResourceType), Position position = default(Position), List<WorkingHours> workingHours = default(List<WorkingHours>), string maxTime = default(string), string maxDistance = default(string), Position destinationPosition = default(Position), StayOutDefinition stayOutDefinition = default(StayOutDefinition), StayOutCycleDefinition stayOutCycleDefinition = default(StayOutCycleDefinition), string stayOutPolicyTime = default(string), string stayOutPolicyDistance = default(string), List<double> capacity = default(List<double>), List<double> initialLoad = default(List<double>), List<double> minDegratedCapacity = default(List<double>), List<double> capacityDegPerStop = default(List<double>), StartReductionTimeDefinition startReductionTimeDefinition = default(StartReductionTimeDefinition), StartReductionTimePillarDefinition startReductionTimePillarDefinition = default(StartReductionTimePillarDefinition), StartReductionTimeIncludeDefinition startReductionTimeIncludeDefinition = default(StartReductionTimeIncludeDefinition), string flexTime = default(string), string postFlexTime = default(string), bool? postFlexTimeOnlyOnOvertime = false, string maxPillarAfterHoursTime = default(string), string maxDriveTimeFirstNode = default(string), string maxDriveDistanceFirstNode = default(string), string maxDriveTimeLastNode = default(string), string maxDriveDistanceLastNode = default(string), double kilometerCost = default(double), double hourCost = default(double), double fixCost = default(double), string preWorkDrivingTime = default(string), double skillEfficiencyFactor = default(double), string acceptableOvertime = default(string), string strictOvertime = default(string), string acceptableOverdistance = default(string), string strictOverdistance = default(string), double averageSpeed = default(double), List<Qualification> qualifications = default(List<Qualification>), List<Constraint> constraints = default(List<Constraint>), double connectionTimeEfficiencyFactor = 1.0D, double co2emissionFactor = default(double), IResourceDepot resourceDepot = default(IResourceDepot), double overallVisitDurationEfficiency = 1.0D, bool? isReductionTimeOnlyUsedForDriving = false, bool? isReductionTimeIncludedInTotalWorkingTime = false)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Resource and cannot be null");
            }
            this.Id = id;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Resource and cannot be null");
            }
            this.Type = type;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for Resource and cannot be null");
            }
            this.Position = position;
            // to ensure "workingHours" is required (not null)
            if (workingHours == null)
            {
                throw new ArgumentNullException("workingHours is a required property for Resource and cannot be null");
            }
            this.WorkingHours = workingHours;
            // to ensure "maxTime" is required (not null)
            if (maxTime == null)
            {
                throw new ArgumentNullException("maxTime is a required property for Resource and cannot be null");
            }
            this.MaxTime = maxTime;
            // to ensure "maxDistance" is required (not null)
            if (maxDistance == null)
            {
                throw new ArgumentNullException("maxDistance is a required property for Resource and cannot be null");
            }
            this.MaxDistance = maxDistance;
            this.LocationId = locationId;
            this.DestinationPosition = destinationPosition;
            this.StayOutDefinition = stayOutDefinition;
            this.StayOutCycleDefinition = stayOutCycleDefinition;
            this.StayOutPolicyTime = stayOutPolicyTime;
            this.StayOutPolicyDistance = stayOutPolicyDistance;
            this.Capacity = capacity;
            this.InitialLoad = initialLoad;
            this.MinDegratedCapacity = minDegratedCapacity;
            this.CapacityDegPerStop = capacityDegPerStop;
            this.StartReductionTimeDefinition = startReductionTimeDefinition;
            this.StartReductionTimePillarDefinition = startReductionTimePillarDefinition;
            this.StartReductionTimeIncludeDefinition = startReductionTimeIncludeDefinition;
            this.FlexTime = flexTime;
            this.PostFlexTime = postFlexTime;
            // use default value if no "postFlexTimeOnlyOnOvertime" provided
            this.PostFlexTimeOnlyOnOvertime = postFlexTimeOnlyOnOvertime ?? false;
            this.MaxPillarAfterHoursTime = maxPillarAfterHoursTime;
            this.MaxDriveTimeFirstNode = maxDriveTimeFirstNode;
            this.MaxDriveDistanceFirstNode = maxDriveDistanceFirstNode;
            this.MaxDriveTimeLastNode = maxDriveTimeLastNode;
            this.MaxDriveDistanceLastNode = maxDriveDistanceLastNode;
            this.KilometerCost = kilometerCost;
            this.HourCost = hourCost;
            this.FixCost = fixCost;
            this.PreWorkDrivingTime = preWorkDrivingTime;
            this.SkillEfficiencyFactor = skillEfficiencyFactor;
            this.AcceptableOvertime = acceptableOvertime;
            this.StrictOvertime = strictOvertime;
            this.AcceptableOverdistance = acceptableOverdistance;
            this.StrictOverdistance = strictOverdistance;
            this.AverageSpeed = averageSpeed;
            this.Qualifications = qualifications;
            this.Constraints = constraints;
            this.ConnectionTimeEfficiencyFactor = connectionTimeEfficiencyFactor;
            this.Co2emissionFactor = co2emissionFactor;
            this.ResourceDepot = resourceDepot;
            this.OverallVisitDurationEfficiency = overallVisitDurationEfficiency;
            // use default value if no "isReductionTimeOnlyUsedForDriving" provided
            this.IsReductionTimeOnlyUsedForDriving = isReductionTimeOnlyUsedForDriving ?? false;
            // use default value if no "isReductionTimeIncludedInTotalWorkingTime" provided
            this.IsReductionTimeIncludedInTotalWorkingTime = isReductionTimeIncludedInTotalWorkingTime ?? false;
        }

        /// <summary>
        /// The unique id of the Resource. It is not possible, to create mutliple elements (also Nodes) with the same id.
        /// </summary>
        /// <value>The unique id of the Resource. It is not possible, to create mutliple elements (also Nodes) with the same id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The location id can relate a Resouce to the connection of another resource. See also locationId of Node.
        /// </summary>
        /// <value>The location id can relate a Resouce to the connection of another resource. See also locationId of Node.</value>
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public ResourceType Type { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = false)]
        public Position Position { get; set; }

        /// <summary>
        /// The list of non-overlapping workingHours.
        /// </summary>
        /// <value>The list of non-overlapping workingHours.</value>
        [DataMember(Name = "workingHours", IsRequired = true, EmitDefaultValue = false)]
        public List<WorkingHours> WorkingHours { get; set; }

        /// <summary>
        /// The maxTime. The maximal time a Resource should work within the WorkingHour. This value is NOT logically coupled to the workingHours. For example, a working hour is defined from 8 in the morning till  5 in the afternoon and the maxTime is defined as 4 hours. In this situation an overime violation will be already  generated  when the Resource works from 8 till 1 (one hour of overtime). As JOpt supports flexible start times, the Resource might work from 12-4 (4 hours &#x3D;&gt; not violation). The workingHour itself should be seen as a frame that is used primarily for matching WokingHours of Resources and OpeningHours of nodes. If no flexTime is used, the Resource will always start working at the beginning of its current working hours.
        /// </summary>
        /// <value>The maxTime. The maximal time a Resource should work within the WorkingHour. This value is NOT logically coupled to the workingHours. For example, a working hour is defined from 8 in the morning till  5 in the afternoon and the maxTime is defined as 4 hours. In this situation an overime violation will be already  generated  when the Resource works from 8 till 1 (one hour of overtime). As JOpt supports flexible start times, the Resource might work from 12-4 (4 hours &#x3D;&gt; not violation). The workingHour itself should be seen as a frame that is used primarily for matching WokingHours of Resources and OpeningHours of nodes. If no flexTime is used, the Resource will always start working at the beginning of its current working hours.</value>
        [DataMember(Name = "maxTime", IsRequired = true, EmitDefaultValue = false)]
        public string MaxTime { get; set; }

        /// <summary>
        /// The maxDistance. The maximal distance a Resource is allowed to drive within a certain working hours.
        /// </summary>
        /// <value>The maxDistance. The maximal distance a Resource is allowed to drive within a certain working hours.</value>
        [DataMember(Name = "maxDistance", IsRequired = true, EmitDefaultValue = false)]
        public string MaxDistance { get; set; }

        /// <summary>
        /// Gets or Sets DestinationPosition
        /// </summary>
        [DataMember(Name = "destinationPosition", EmitDefaultValue = false)]
        public Position DestinationPosition { get; set; }

        /// <summary>
        /// Gets or Sets StayOutDefinition
        /// </summary>
        [DataMember(Name = "stayOutDefinition", EmitDefaultValue = false)]
        public StayOutDefinition StayOutDefinition { get; set; }

        /// <summary>
        /// Gets or Sets StayOutCycleDefinition
        /// </summary>
        [DataMember(Name = "stayOutCycleDefinition", EmitDefaultValue = false)]
        public StayOutCycleDefinition StayOutCycleDefinition { get; set; }

        /// <summary>
        /// The stayOutPolicyTime
        /// </summary>
        /// <value>The stayOutPolicyTime</value>
        [DataMember(Name = "stayOutPolicyTime", EmitDefaultValue = false)]
        public string StayOutPolicyTime { get; set; }

        /// <summary>
        /// The stayOutPolicyDistance
        /// </summary>
        /// <value>The stayOutPolicyDistance</value>
        [DataMember(Name = "stayOutPolicyDistance", EmitDefaultValue = false)]
        public string StayOutPolicyDistance { get; set; }

        /// <summary>
        /// The capacity
        /// </summary>
        /// <value>The capacity</value>
        [DataMember(Name = "capacity", EmitDefaultValue = false)]
        public List<double> Capacity { get; set; }

        /// <summary>
        /// The initialLoad
        /// </summary>
        /// <value>The initialLoad</value>
        [DataMember(Name = "initialLoad", EmitDefaultValue = false)]
        public List<double> InitialLoad { get; set; }

        /// <summary>
        /// The minDegratedCapacity
        /// </summary>
        /// <value>The minDegratedCapacity</value>
        [DataMember(Name = "minDegratedCapacity", EmitDefaultValue = false)]
        public List<double> MinDegratedCapacity { get; set; }

        /// <summary>
        /// The capacityDegPerStop
        /// </summary>
        /// <value>The capacityDegPerStop</value>
        [DataMember(Name = "capacityDegPerStop", EmitDefaultValue = false)]
        public List<double> CapacityDegPerStop { get; set; }

        /// <summary>
        /// Gets or Sets StartReductionTimeDefinition
        /// </summary>
        [DataMember(Name = "startReductionTimeDefinition", EmitDefaultValue = false)]
        public StartReductionTimeDefinition StartReductionTimeDefinition { get; set; }

        /// <summary>
        /// Gets or Sets StartReductionTimePillarDefinition
        /// </summary>
        [DataMember(Name = "startReductionTimePillarDefinition", EmitDefaultValue = false)]
        public StartReductionTimePillarDefinition StartReductionTimePillarDefinition { get; set; }

        /// <summary>
        /// Gets or Sets StartReductionTimeIncludeDefinition
        /// </summary>
        [DataMember(Name = "startReductionTimeIncludeDefinition", EmitDefaultValue = false)]
        public StartReductionTimeIncludeDefinition StartReductionTimeIncludeDefinition { get; set; }

        /// <summary>
        /// The local flexible time. In some cases a Resource should start working later compared to what is defined in the working hours. This way idle time can be reduced. The local flex time is the maximum a Resource is allowed to start working later, depending on the Optimization maybe flex time is not or only partially used.
        /// </summary>
        /// <value>The local flexible time. In some cases a Resource should start working later compared to what is defined in the working hours. This way idle time can be reduced. The local flex time is the maximum a Resource is allowed to start working later, depending on the Optimization maybe flex time is not or only partially used.</value>
        [DataMember(Name = "flexTime", EmitDefaultValue = false)]
        public string FlexTime { get; set; }

        /// <summary>
        /// The postFlexTime
        /// </summary>
        /// <value>The postFlexTime</value>
        [DataMember(Name = "postFlexTime", EmitDefaultValue = false)]
        public string PostFlexTime { get; set; }

        /// <summary>
        /// The post flextime is only applied to reduce overtime.
        /// </summary>
        /// <value>The post flextime is only applied to reduce overtime.</value>
        [DataMember(Name = "postFlexTimeOnlyOnOvertime", EmitDefaultValue = true)]
        public bool? PostFlexTimeOnlyOnOvertime { get; set; }

        /// <summary>
        /// The maxPillarAfterHoursTime
        /// </summary>
        /// <value>The maxPillarAfterHoursTime</value>
        [DataMember(Name = "maxPillarAfterHoursTime", EmitDefaultValue = false)]
        public string MaxPillarAfterHoursTime { get; set; }

        /// <summary>
        /// The maxDriveTimeFirstNode
        /// </summary>
        /// <value>The maxDriveTimeFirstNode</value>
        [DataMember(Name = "maxDriveTimeFirstNode", EmitDefaultValue = false)]
        public string MaxDriveTimeFirstNode { get; set; }

        /// <summary>
        /// The maxDriveDistanceFirstNode
        /// </summary>
        /// <value>The maxDriveDistanceFirstNode</value>
        [DataMember(Name = "maxDriveDistanceFirstNode", EmitDefaultValue = false)]
        public string MaxDriveDistanceFirstNode { get; set; }

        /// <summary>
        /// The maxDriveTimeLastNode
        /// </summary>
        /// <value>The maxDriveTimeLastNode</value>
        [DataMember(Name = "maxDriveTimeLastNode", EmitDefaultValue = false)]
        public string MaxDriveTimeLastNode { get; set; }

        /// <summary>
        /// The maxDriveDistanceLastNode
        /// </summary>
        /// <value>The maxDriveDistanceLastNode</value>
        [DataMember(Name = "maxDriveDistanceLastNode", EmitDefaultValue = false)]
        public string MaxDriveDistanceLastNode { get; set; }

        /// <summary>
        /// The kilometerCost defines how much arbitrary cost arises per kilometer driven.
        /// </summary>
        /// <value>The kilometerCost defines how much arbitrary cost arises per kilometer driven.</value>
        [DataMember(Name = "kilometerCost", EmitDefaultValue = false)]
        public double KilometerCost { get; set; }

        /// <summary>
        /// The hourCost defines how much arbitrary cost arises per hour scheduled (idling, working, driving).
        /// </summary>
        /// <value>The hourCost defines how much arbitrary cost arises per hour scheduled (idling, working, driving).</value>
        [DataMember(Name = "hourCost", EmitDefaultValue = false)]
        public double HourCost { get; set; }

        /// <summary>
        /// The fixCost defines an abstract cost that arrises when this node is visited.
        /// </summary>
        /// <value>The fixCost defines an abstract cost that arrises when this node is visited.</value>
        [DataMember(Name = "fixCost", EmitDefaultValue = false)]
        public double FixCost { get; set; }

        /// <summary>
        /// The preWorkDrivingTime.  Use startReductionTimeDefinition instead.
        /// </summary>
        /// <value>The preWorkDrivingTime.  Use startReductionTimeDefinition instead.</value>
        [DataMember(Name = "preWorkDrivingTime", EmitDefaultValue = false)]
        public string PreWorkDrivingTime { get; set; }

        /// <summary>
        /// The skillEfficiencyFactor
        /// </summary>
        /// <value>The skillEfficiencyFactor</value>
        [DataMember(Name = "skillEfficiencyFactor", EmitDefaultValue = false)]
        public double SkillEfficiencyFactor { get; set; }

        /// <summary>
        /// The acceptableOvertime. By default if nodes are constantly leading to overtime for a resource, at some point they might get unassigned (if AutoFilter is activated). The acceptable overtime assigns a margin to avoid filtering nodes if they lead to overtime below this margin. By defaul the property  &#39;JoptAutoFilterWorkingHoursExceedMargin&#39; can be used to globally define this value.
        /// </summary>
        /// <value>The acceptableOvertime. By default if nodes are constantly leading to overtime for a resource, at some point they might get unassigned (if AutoFilter is activated). The acceptable overtime assigns a margin to avoid filtering nodes if they lead to overtime below this margin. By defaul the property  &#39;JoptAutoFilterWorkingHoursExceedMargin&#39; can be used to globally define this value.</value>
        [DataMember(Name = "acceptableOvertime", EmitDefaultValue = false)]
        public string AcceptableOvertime { get; set; }

        /// <summary>
        /// The strictOvertime. By default if nodes are constantly leading to overtime for a resource, at some point they might get unassigned (if AutoFilter is activated). The strictOvertime overtime assigns a margin to avoid filtering nodes if they lead to overtime below this margin. By defaul the property  &#39;JoptAutoFilterWorkingHoursStrictExceedMargin&#39; can be used to globally define this value. In contrast to acceptable  overtime, the strict overtime is used during the last fitlering step of the AutoFilter (if strict mode is enabled).
        /// </summary>
        /// <value>The strictOvertime. By default if nodes are constantly leading to overtime for a resource, at some point they might get unassigned (if AutoFilter is activated). The strictOvertime overtime assigns a margin to avoid filtering nodes if they lead to overtime below this margin. By defaul the property  &#39;JoptAutoFilterWorkingHoursStrictExceedMargin&#39; can be used to globally define this value. In contrast to acceptable  overtime, the strict overtime is used during the last fitlering step of the AutoFilter (if strict mode is enabled).</value>
        [DataMember(Name = "strictOvertime", EmitDefaultValue = false)]
        public string StrictOvertime { get; set; }

        /// <summary>
        /// The acceptableOverdistance. Like acceptableOvertime for distance.
        /// </summary>
        /// <value>The acceptableOverdistance. Like acceptableOvertime for distance.</value>
        [DataMember(Name = "acceptableOverdistance", EmitDefaultValue = false)]
        public string AcceptableOverdistance { get; set; }

        /// <summary>
        /// The strictOverdistance. Like strictOvertime for distance.
        /// </summary>
        /// <value>The strictOverdistance. Like strictOvertime for distance.</value>
        [DataMember(Name = "strictOverdistance", EmitDefaultValue = false)]
        public string StrictOverdistance { get; set; }

        /// <summary>
        /// The averageSpeed of the Resource. By default this value is set to be 22[m/s] (79.2[km/h]). This value is mainly used, in case no external node connections are provided.
        /// </summary>
        /// <value>The averageSpeed of the Resource. By default this value is set to be 22[m/s] (79.2[km/h]). This value is mainly used, in case no external node connections are provided.</value>
        [DataMember(Name = "averageSpeed", EmitDefaultValue = false)]
        public double AverageSpeed { get; set; }

        /// <summary>
        /// The qualifications of the Resource.
        /// </summary>
        /// <value>The qualifications of the Resource.</value>
        [DataMember(Name = "qualifications", EmitDefaultValue = false)]
        public List<Qualification> Qualifications { get; set; }

        /// <summary>
        /// The constraints  of the Resource
        /// </summary>
        /// <value>The constraints  of the Resource</value>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<Constraint> Constraints { get; set; }

        /// <summary>
        /// The connectionTimeEfficiencyFactor. The default time for passing a connection is devided by this factor. For example, if a connections needs 30 minutes to be passed by default, a Resource with a connectionTimeEfficiencyFactor of 1.5 only needs 20 minutes. By default this factor is one.
        /// </summary>
        /// <value>The connectionTimeEfficiencyFactor. The default time for passing a connection is devided by this factor. For example, if a connections needs 30 minutes to be passed by default, a Resource with a connectionTimeEfficiencyFactor of 1.5 only needs 20 minutes. By default this factor is one.</value>
        [DataMember(Name = "connectionTimeEfficiencyFactor", EmitDefaultValue = false)]
        public double ConnectionTimeEfficiencyFactor { get; set; }

        /// <summary>
        /// The co2emissionFactor.
        /// </summary>
        /// <value>The co2emissionFactor.</value>
        [DataMember(Name = "co2emissionFactor", EmitDefaultValue = false)]
        public double Co2emissionFactor { get; set; }

        /// <summary>
        /// Gets or Sets ResourceDepot
        /// </summary>
        [DataMember(Name = "resourceDepot", EmitDefaultValue = false)]
        public IResourceDepot ResourceDepot { get; set; }

        /// <summary>
        /// The overallVisitDurationEfficiency. The base duration a Resource spends at a node is devided by this factor. For example, if a node has 30 minutes of visit duration assigned, a Resource with a overallVisitDurationEfficiency of 1.5 only needs 20 minutes. By default this factor is one.
        /// </summary>
        /// <value>The overallVisitDurationEfficiency. The base duration a Resource spends at a node is devided by this factor. For example, if a node has 30 minutes of visit duration assigned, a Resource with a overallVisitDurationEfficiency of 1.5 only needs 20 minutes. By default this factor is one.</value>
        [DataMember(Name = "overallVisitDurationEfficiency", EmitDefaultValue = false)]
        public double OverallVisitDurationEfficiency { get; set; }

        /// <summary>
        /// The isReductionTimeOnlyUsedForDriving. Use startReductionTimeDefinition instead.
        /// </summary>
        /// <value>The isReductionTimeOnlyUsedForDriving. Use startReductionTimeDefinition instead.</value>
        [DataMember(Name = "isReductionTimeOnlyUsedForDriving", EmitDefaultValue = true)]
        public bool? IsReductionTimeOnlyUsedForDriving { get; set; }

        /// <summary>
        /// The isReductionTimeIncludedInTotalWorkingTime. Use StartReductionTimeIncludeDefinition instead
        /// </summary>
        /// <value>The isReductionTimeIncludedInTotalWorkingTime. Use StartReductionTimeIncludeDefinition instead</value>
        [DataMember(Name = "isReductionTimeIncludedInTotalWorkingTime", EmitDefaultValue = true)]
        public bool? IsReductionTimeIncludedInTotalWorkingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Resource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  WorkingHours: ").Append(WorkingHours).Append("\n");
            sb.Append("  MaxTime: ").Append(MaxTime).Append("\n");
            sb.Append("  MaxDistance: ").Append(MaxDistance).Append("\n");
            sb.Append("  DestinationPosition: ").Append(DestinationPosition).Append("\n");
            sb.Append("  StayOutDefinition: ").Append(StayOutDefinition).Append("\n");
            sb.Append("  StayOutCycleDefinition: ").Append(StayOutCycleDefinition).Append("\n");
            sb.Append("  StayOutPolicyTime: ").Append(StayOutPolicyTime).Append("\n");
            sb.Append("  StayOutPolicyDistance: ").Append(StayOutPolicyDistance).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  InitialLoad: ").Append(InitialLoad).Append("\n");
            sb.Append("  MinDegratedCapacity: ").Append(MinDegratedCapacity).Append("\n");
            sb.Append("  CapacityDegPerStop: ").Append(CapacityDegPerStop).Append("\n");
            sb.Append("  StartReductionTimeDefinition: ").Append(StartReductionTimeDefinition).Append("\n");
            sb.Append("  StartReductionTimePillarDefinition: ").Append(StartReductionTimePillarDefinition).Append("\n");
            sb.Append("  StartReductionTimeIncludeDefinition: ").Append(StartReductionTimeIncludeDefinition).Append("\n");
            sb.Append("  FlexTime: ").Append(FlexTime).Append("\n");
            sb.Append("  PostFlexTime: ").Append(PostFlexTime).Append("\n");
            sb.Append("  PostFlexTimeOnlyOnOvertime: ").Append(PostFlexTimeOnlyOnOvertime).Append("\n");
            sb.Append("  MaxPillarAfterHoursTime: ").Append(MaxPillarAfterHoursTime).Append("\n");
            sb.Append("  MaxDriveTimeFirstNode: ").Append(MaxDriveTimeFirstNode).Append("\n");
            sb.Append("  MaxDriveDistanceFirstNode: ").Append(MaxDriveDistanceFirstNode).Append("\n");
            sb.Append("  MaxDriveTimeLastNode: ").Append(MaxDriveTimeLastNode).Append("\n");
            sb.Append("  MaxDriveDistanceLastNode: ").Append(MaxDriveDistanceLastNode).Append("\n");
            sb.Append("  KilometerCost: ").Append(KilometerCost).Append("\n");
            sb.Append("  HourCost: ").Append(HourCost).Append("\n");
            sb.Append("  FixCost: ").Append(FixCost).Append("\n");
            sb.Append("  PreWorkDrivingTime: ").Append(PreWorkDrivingTime).Append("\n");
            sb.Append("  SkillEfficiencyFactor: ").Append(SkillEfficiencyFactor).Append("\n");
            sb.Append("  AcceptableOvertime: ").Append(AcceptableOvertime).Append("\n");
            sb.Append("  StrictOvertime: ").Append(StrictOvertime).Append("\n");
            sb.Append("  AcceptableOverdistance: ").Append(AcceptableOverdistance).Append("\n");
            sb.Append("  StrictOverdistance: ").Append(StrictOverdistance).Append("\n");
            sb.Append("  AverageSpeed: ").Append(AverageSpeed).Append("\n");
            sb.Append("  Qualifications: ").Append(Qualifications).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  ConnectionTimeEfficiencyFactor: ").Append(ConnectionTimeEfficiencyFactor).Append("\n");
            sb.Append("  Co2emissionFactor: ").Append(Co2emissionFactor).Append("\n");
            sb.Append("  ResourceDepot: ").Append(ResourceDepot).Append("\n");
            sb.Append("  OverallVisitDurationEfficiency: ").Append(OverallVisitDurationEfficiency).Append("\n");
            sb.Append("  IsReductionTimeOnlyUsedForDriving: ").Append(IsReductionTimeOnlyUsedForDriving).Append("\n");
            sb.Append("  IsReductionTimeIncludedInTotalWorkingTime: ").Append(IsReductionTimeIncludedInTotalWorkingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Resource);
        }

        /// <summary>
        /// Returns true if Resource instances are equal
        /// </summary>
        /// <param name="input">Instance of Resource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Resource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.WorkingHours == input.WorkingHours ||
                    this.WorkingHours != null &&
                    input.WorkingHours != null &&
                    this.WorkingHours.SequenceEqual(input.WorkingHours)
                ) && 
                (
                    this.MaxTime == input.MaxTime ||
                    (this.MaxTime != null &&
                    this.MaxTime.Equals(input.MaxTime))
                ) && 
                (
                    this.MaxDistance == input.MaxDistance ||
                    (this.MaxDistance != null &&
                    this.MaxDistance.Equals(input.MaxDistance))
                ) && 
                (
                    this.DestinationPosition == input.DestinationPosition ||
                    (this.DestinationPosition != null &&
                    this.DestinationPosition.Equals(input.DestinationPosition))
                ) && 
                (
                    this.StayOutDefinition == input.StayOutDefinition ||
                    (this.StayOutDefinition != null &&
                    this.StayOutDefinition.Equals(input.StayOutDefinition))
                ) && 
                (
                    this.StayOutCycleDefinition == input.StayOutCycleDefinition ||
                    (this.StayOutCycleDefinition != null &&
                    this.StayOutCycleDefinition.Equals(input.StayOutCycleDefinition))
                ) && 
                (
                    this.StayOutPolicyTime == input.StayOutPolicyTime ||
                    (this.StayOutPolicyTime != null &&
                    this.StayOutPolicyTime.Equals(input.StayOutPolicyTime))
                ) && 
                (
                    this.StayOutPolicyDistance == input.StayOutPolicyDistance ||
                    (this.StayOutPolicyDistance != null &&
                    this.StayOutPolicyDistance.Equals(input.StayOutPolicyDistance))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    this.Capacity != null &&
                    input.Capacity != null &&
                    this.Capacity.SequenceEqual(input.Capacity)
                ) && 
                (
                    this.InitialLoad == input.InitialLoad ||
                    this.InitialLoad != null &&
                    input.InitialLoad != null &&
                    this.InitialLoad.SequenceEqual(input.InitialLoad)
                ) && 
                (
                    this.MinDegratedCapacity == input.MinDegratedCapacity ||
                    this.MinDegratedCapacity != null &&
                    input.MinDegratedCapacity != null &&
                    this.MinDegratedCapacity.SequenceEqual(input.MinDegratedCapacity)
                ) && 
                (
                    this.CapacityDegPerStop == input.CapacityDegPerStop ||
                    this.CapacityDegPerStop != null &&
                    input.CapacityDegPerStop != null &&
                    this.CapacityDegPerStop.SequenceEqual(input.CapacityDegPerStop)
                ) && 
                (
                    this.StartReductionTimeDefinition == input.StartReductionTimeDefinition ||
                    (this.StartReductionTimeDefinition != null &&
                    this.StartReductionTimeDefinition.Equals(input.StartReductionTimeDefinition))
                ) && 
                (
                    this.StartReductionTimePillarDefinition == input.StartReductionTimePillarDefinition ||
                    (this.StartReductionTimePillarDefinition != null &&
                    this.StartReductionTimePillarDefinition.Equals(input.StartReductionTimePillarDefinition))
                ) && 
                (
                    this.StartReductionTimeIncludeDefinition == input.StartReductionTimeIncludeDefinition ||
                    (this.StartReductionTimeIncludeDefinition != null &&
                    this.StartReductionTimeIncludeDefinition.Equals(input.StartReductionTimeIncludeDefinition))
                ) && 
                (
                    this.FlexTime == input.FlexTime ||
                    (this.FlexTime != null &&
                    this.FlexTime.Equals(input.FlexTime))
                ) && 
                (
                    this.PostFlexTime == input.PostFlexTime ||
                    (this.PostFlexTime != null &&
                    this.PostFlexTime.Equals(input.PostFlexTime))
                ) && 
                (
                    this.PostFlexTimeOnlyOnOvertime == input.PostFlexTimeOnlyOnOvertime ||
                    (this.PostFlexTimeOnlyOnOvertime != null &&
                    this.PostFlexTimeOnlyOnOvertime.Equals(input.PostFlexTimeOnlyOnOvertime))
                ) && 
                (
                    this.MaxPillarAfterHoursTime == input.MaxPillarAfterHoursTime ||
                    (this.MaxPillarAfterHoursTime != null &&
                    this.MaxPillarAfterHoursTime.Equals(input.MaxPillarAfterHoursTime))
                ) && 
                (
                    this.MaxDriveTimeFirstNode == input.MaxDriveTimeFirstNode ||
                    (this.MaxDriveTimeFirstNode != null &&
                    this.MaxDriveTimeFirstNode.Equals(input.MaxDriveTimeFirstNode))
                ) && 
                (
                    this.MaxDriveDistanceFirstNode == input.MaxDriveDistanceFirstNode ||
                    (this.MaxDriveDistanceFirstNode != null &&
                    this.MaxDriveDistanceFirstNode.Equals(input.MaxDriveDistanceFirstNode))
                ) && 
                (
                    this.MaxDriveTimeLastNode == input.MaxDriveTimeLastNode ||
                    (this.MaxDriveTimeLastNode != null &&
                    this.MaxDriveTimeLastNode.Equals(input.MaxDriveTimeLastNode))
                ) && 
                (
                    this.MaxDriveDistanceLastNode == input.MaxDriveDistanceLastNode ||
                    (this.MaxDriveDistanceLastNode != null &&
                    this.MaxDriveDistanceLastNode.Equals(input.MaxDriveDistanceLastNode))
                ) && 
                (
                    this.KilometerCost == input.KilometerCost ||
                    this.KilometerCost.Equals(input.KilometerCost)
                ) && 
                (
                    this.HourCost == input.HourCost ||
                    this.HourCost.Equals(input.HourCost)
                ) && 
                (
                    this.FixCost == input.FixCost ||
                    this.FixCost.Equals(input.FixCost)
                ) && 
                (
                    this.PreWorkDrivingTime == input.PreWorkDrivingTime ||
                    (this.PreWorkDrivingTime != null &&
                    this.PreWorkDrivingTime.Equals(input.PreWorkDrivingTime))
                ) && 
                (
                    this.SkillEfficiencyFactor == input.SkillEfficiencyFactor ||
                    this.SkillEfficiencyFactor.Equals(input.SkillEfficiencyFactor)
                ) && 
                (
                    this.AcceptableOvertime == input.AcceptableOvertime ||
                    (this.AcceptableOvertime != null &&
                    this.AcceptableOvertime.Equals(input.AcceptableOvertime))
                ) && 
                (
                    this.StrictOvertime == input.StrictOvertime ||
                    (this.StrictOvertime != null &&
                    this.StrictOvertime.Equals(input.StrictOvertime))
                ) && 
                (
                    this.AcceptableOverdistance == input.AcceptableOverdistance ||
                    (this.AcceptableOverdistance != null &&
                    this.AcceptableOverdistance.Equals(input.AcceptableOverdistance))
                ) && 
                (
                    this.StrictOverdistance == input.StrictOverdistance ||
                    (this.StrictOverdistance != null &&
                    this.StrictOverdistance.Equals(input.StrictOverdistance))
                ) && 
                (
                    this.AverageSpeed == input.AverageSpeed ||
                    this.AverageSpeed.Equals(input.AverageSpeed)
                ) && 
                (
                    this.Qualifications == input.Qualifications ||
                    this.Qualifications != null &&
                    input.Qualifications != null &&
                    this.Qualifications.SequenceEqual(input.Qualifications)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.ConnectionTimeEfficiencyFactor == input.ConnectionTimeEfficiencyFactor ||
                    this.ConnectionTimeEfficiencyFactor.Equals(input.ConnectionTimeEfficiencyFactor)
                ) && 
                (
                    this.Co2emissionFactor == input.Co2emissionFactor ||
                    this.Co2emissionFactor.Equals(input.Co2emissionFactor)
                ) && 
                (
                    this.ResourceDepot == input.ResourceDepot ||
                    (this.ResourceDepot != null &&
                    this.ResourceDepot.Equals(input.ResourceDepot))
                ) && 
                (
                    this.OverallVisitDurationEfficiency == input.OverallVisitDurationEfficiency ||
                    this.OverallVisitDurationEfficiency.Equals(input.OverallVisitDurationEfficiency)
                ) && 
                (
                    this.IsReductionTimeOnlyUsedForDriving == input.IsReductionTimeOnlyUsedForDriving ||
                    (this.IsReductionTimeOnlyUsedForDriving != null &&
                    this.IsReductionTimeOnlyUsedForDriving.Equals(input.IsReductionTimeOnlyUsedForDriving))
                ) && 
                (
                    this.IsReductionTimeIncludedInTotalWorkingTime == input.IsReductionTimeIncludedInTotalWorkingTime ||
                    (this.IsReductionTimeIncludedInTotalWorkingTime != null &&
                    this.IsReductionTimeIncludedInTotalWorkingTime.Equals(input.IsReductionTimeIncludedInTotalWorkingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.LocationId != null)
                {
                    hashCode = (hashCode * 59) + this.LocationId.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Position != null)
                {
                    hashCode = (hashCode * 59) + this.Position.GetHashCode();
                }
                if (this.WorkingHours != null)
                {
                    hashCode = (hashCode * 59) + this.WorkingHours.GetHashCode();
                }
                if (this.MaxTime != null)
                {
                    hashCode = (hashCode * 59) + this.MaxTime.GetHashCode();
                }
                if (this.MaxDistance != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDistance.GetHashCode();
                }
                if (this.DestinationPosition != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationPosition.GetHashCode();
                }
                if (this.StayOutDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.StayOutDefinition.GetHashCode();
                }
                if (this.StayOutCycleDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.StayOutCycleDefinition.GetHashCode();
                }
                if (this.StayOutPolicyTime != null)
                {
                    hashCode = (hashCode * 59) + this.StayOutPolicyTime.GetHashCode();
                }
                if (this.StayOutPolicyDistance != null)
                {
                    hashCode = (hashCode * 59) + this.StayOutPolicyDistance.GetHashCode();
                }
                if (this.Capacity != null)
                {
                    hashCode = (hashCode * 59) + this.Capacity.GetHashCode();
                }
                if (this.InitialLoad != null)
                {
                    hashCode = (hashCode * 59) + this.InitialLoad.GetHashCode();
                }
                if (this.MinDegratedCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.MinDegratedCapacity.GetHashCode();
                }
                if (this.CapacityDegPerStop != null)
                {
                    hashCode = (hashCode * 59) + this.CapacityDegPerStop.GetHashCode();
                }
                if (this.StartReductionTimeDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.StartReductionTimeDefinition.GetHashCode();
                }
                if (this.StartReductionTimePillarDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.StartReductionTimePillarDefinition.GetHashCode();
                }
                if (this.StartReductionTimeIncludeDefinition != null)
                {
                    hashCode = (hashCode * 59) + this.StartReductionTimeIncludeDefinition.GetHashCode();
                }
                if (this.FlexTime != null)
                {
                    hashCode = (hashCode * 59) + this.FlexTime.GetHashCode();
                }
                if (this.PostFlexTime != null)
                {
                    hashCode = (hashCode * 59) + this.PostFlexTime.GetHashCode();
                }
                if (this.PostFlexTimeOnlyOnOvertime != null)
                {
                    hashCode = (hashCode * 59) + this.PostFlexTimeOnlyOnOvertime.GetHashCode();
                }
                if (this.MaxPillarAfterHoursTime != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPillarAfterHoursTime.GetHashCode();
                }
                if (this.MaxDriveTimeFirstNode != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDriveTimeFirstNode.GetHashCode();
                }
                if (this.MaxDriveDistanceFirstNode != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDriveDistanceFirstNode.GetHashCode();
                }
                if (this.MaxDriveTimeLastNode != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDriveTimeLastNode.GetHashCode();
                }
                if (this.MaxDriveDistanceLastNode != null)
                {
                    hashCode = (hashCode * 59) + this.MaxDriveDistanceLastNode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KilometerCost.GetHashCode();
                hashCode = (hashCode * 59) + this.HourCost.GetHashCode();
                hashCode = (hashCode * 59) + this.FixCost.GetHashCode();
                if (this.PreWorkDrivingTime != null)
                {
                    hashCode = (hashCode * 59) + this.PreWorkDrivingTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SkillEfficiencyFactor.GetHashCode();
                if (this.AcceptableOvertime != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptableOvertime.GetHashCode();
                }
                if (this.StrictOvertime != null)
                {
                    hashCode = (hashCode * 59) + this.StrictOvertime.GetHashCode();
                }
                if (this.AcceptableOverdistance != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptableOverdistance.GetHashCode();
                }
                if (this.StrictOverdistance != null)
                {
                    hashCode = (hashCode * 59) + this.StrictOverdistance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AverageSpeed.GetHashCode();
                if (this.Qualifications != null)
                {
                    hashCode = (hashCode * 59) + this.Qualifications.GetHashCode();
                }
                if (this.Constraints != null)
                {
                    hashCode = (hashCode * 59) + this.Constraints.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionTimeEfficiencyFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.Co2emissionFactor.GetHashCode();
                if (this.ResourceDepot != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceDepot.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverallVisitDurationEfficiency.GetHashCode();
                if (this.IsReductionTimeOnlyUsedForDriving != null)
                {
                    hashCode = (hashCode * 59) + this.IsReductionTimeOnlyUsedForDriving.GetHashCode();
                }
                if (this.IsReductionTimeIncludedInTotalWorkingTime != null)
                {
                    hashCode = (hashCode * 59) + this.IsReductionTimeIncludedInTotalWorkingTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
