/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-SNAPSHOT)
 *
 * The version of the OpenAPI document: 1.2.1-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The pillarNode
    /// </summary>
    [DataContract(Name = "EventPillarNode")]
    public partial class EventPillarNode : IEquatable<EventPillarNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventPillarNode" /> class.
        /// </summary>
        /// <param name="attachedResourceId">The attached resourceId. A geoPillar must be visited by this resource..</param>
        /// <param name="onlyScheduledInCompany">The onlyScheduledInCompany.</param>
        /// <param name="isOverwritingRouteTermination">The boolean isOverwritingRouteTermination. Instead of using the default termination element of the route, the geoPillar will be used as so-called endAnchor..</param>
        /// <param name="isSchedulableBeforeWorkingHours">The isSchedulableBeforeWorkingHours.</param>
        /// <param name="isSchedulableAfterWorkingHours">The isSchedulableAfterWorkingHours.</param>
        /// <param name="isTimeAdjustableAnchor">The isTimeAdjustableAnchor.</param>
        /// <param name="isExtendableEnd">The isExtendableEnd.</param>
        public EventPillarNode(string attachedResourceId = default(string), bool onlyScheduledInCompany = default(bool), bool isOverwritingRouteTermination = default(bool), bool isSchedulableBeforeWorkingHours = default(bool), bool isSchedulableAfterWorkingHours = default(bool), bool isTimeAdjustableAnchor = default(bool), bool isExtendableEnd = default(bool))
        {
            this.AttachedResourceId = attachedResourceId;
            this.OnlyScheduledInCompany = onlyScheduledInCompany;
            this.IsOverwritingRouteTermination = isOverwritingRouteTermination;
            this.IsSchedulableBeforeWorkingHours = isSchedulableBeforeWorkingHours;
            this.IsSchedulableAfterWorkingHours = isSchedulableAfterWorkingHours;
            this.IsTimeAdjustableAnchor = isTimeAdjustableAnchor;
            this.IsExtendableEnd = isExtendableEnd;
        }

        /// <summary>
        /// The attached resourceId. A geoPillar must be visited by this resource.
        /// </summary>
        /// <value>The attached resourceId. A geoPillar must be visited by this resource.</value>
        [DataMember(Name = "attachedResourceId", EmitDefaultValue = false)]
        public string AttachedResourceId { get; set; }

        /// <summary>
        /// The onlyScheduledInCompany
        /// </summary>
        /// <value>The onlyScheduledInCompany</value>
        [DataMember(Name = "onlyScheduledInCompany", EmitDefaultValue = true)]
        public bool OnlyScheduledInCompany { get; set; }

        /// <summary>
        /// The boolean isOverwritingRouteTermination. Instead of using the default termination element of the route, the geoPillar will be used as so-called endAnchor.
        /// </summary>
        /// <value>The boolean isOverwritingRouteTermination. Instead of using the default termination element of the route, the geoPillar will be used as so-called endAnchor.</value>
        [DataMember(Name = "isOverwritingRouteTermination", EmitDefaultValue = true)]
        public bool IsOverwritingRouteTermination { get; set; }

        /// <summary>
        /// The isSchedulableBeforeWorkingHours
        /// </summary>
        /// <value>The isSchedulableBeforeWorkingHours</value>
        [DataMember(Name = "isSchedulableBeforeWorkingHours", EmitDefaultValue = true)]
        public bool IsSchedulableBeforeWorkingHours { get; set; }

        /// <summary>
        /// The isSchedulableAfterWorkingHours
        /// </summary>
        /// <value>The isSchedulableAfterWorkingHours</value>
        [DataMember(Name = "isSchedulableAfterWorkingHours", EmitDefaultValue = true)]
        public bool IsSchedulableAfterWorkingHours { get; set; }

        /// <summary>
        /// The isTimeAdjustableAnchor
        /// </summary>
        /// <value>The isTimeAdjustableAnchor</value>
        [DataMember(Name = "isTimeAdjustableAnchor", EmitDefaultValue = true)]
        public bool IsTimeAdjustableAnchor { get; set; }

        /// <summary>
        /// The isExtendableEnd
        /// </summary>
        /// <value>The isExtendableEnd</value>
        [DataMember(Name = "isExtendableEnd", EmitDefaultValue = true)]
        public bool IsExtendableEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventPillarNode {\n");
            sb.Append("  AttachedResourceId: ").Append(AttachedResourceId).Append("\n");
            sb.Append("  OnlyScheduledInCompany: ").Append(OnlyScheduledInCompany).Append("\n");
            sb.Append("  IsOverwritingRouteTermination: ").Append(IsOverwritingRouteTermination).Append("\n");
            sb.Append("  IsSchedulableBeforeWorkingHours: ").Append(IsSchedulableBeforeWorkingHours).Append("\n");
            sb.Append("  IsSchedulableAfterWorkingHours: ").Append(IsSchedulableAfterWorkingHours).Append("\n");
            sb.Append("  IsTimeAdjustableAnchor: ").Append(IsTimeAdjustableAnchor).Append("\n");
            sb.Append("  IsExtendableEnd: ").Append(IsExtendableEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventPillarNode);
        }

        /// <summary>
        /// Returns true if EventPillarNode instances are equal
        /// </summary>
        /// <param name="input">Instance of EventPillarNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventPillarNode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttachedResourceId == input.AttachedResourceId ||
                    (this.AttachedResourceId != null &&
                    this.AttachedResourceId.Equals(input.AttachedResourceId))
                ) && 
                (
                    this.OnlyScheduledInCompany == input.OnlyScheduledInCompany ||
                    this.OnlyScheduledInCompany.Equals(input.OnlyScheduledInCompany)
                ) && 
                (
                    this.IsOverwritingRouteTermination == input.IsOverwritingRouteTermination ||
                    this.IsOverwritingRouteTermination.Equals(input.IsOverwritingRouteTermination)
                ) && 
                (
                    this.IsSchedulableBeforeWorkingHours == input.IsSchedulableBeforeWorkingHours ||
                    this.IsSchedulableBeforeWorkingHours.Equals(input.IsSchedulableBeforeWorkingHours)
                ) && 
                (
                    this.IsSchedulableAfterWorkingHours == input.IsSchedulableAfterWorkingHours ||
                    this.IsSchedulableAfterWorkingHours.Equals(input.IsSchedulableAfterWorkingHours)
                ) && 
                (
                    this.IsTimeAdjustableAnchor == input.IsTimeAdjustableAnchor ||
                    this.IsTimeAdjustableAnchor.Equals(input.IsTimeAdjustableAnchor)
                ) && 
                (
                    this.IsExtendableEnd == input.IsExtendableEnd ||
                    this.IsExtendableEnd.Equals(input.IsExtendableEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachedResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.AttachedResourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OnlyScheduledInCompany.GetHashCode();
                hashCode = (hashCode * 59) + this.IsOverwritingRouteTermination.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSchedulableBeforeWorkingHours.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSchedulableAfterWorkingHours.GetHashCode();
                hashCode = (hashCode * 59) + this.IsTimeAdjustableAnchor.GetHashCode();
                hashCode = (hashCode * 59) + this.IsExtendableEnd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
