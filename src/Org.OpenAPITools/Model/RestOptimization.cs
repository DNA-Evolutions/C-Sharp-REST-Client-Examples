/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.4.9-SNAPSHOT)
 *
 * The version of the OpenAPI document: unknown
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RestOptimization
    /// </summary>
    [DataContract(Name = "RestOptimization")]
    public partial class RestOptimization : IEquatable<RestOptimization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestOptimization" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RestOptimization() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestOptimization" /> class.
        /// </summary>
        /// <param name="optimizationStatus">optimizationStatus.</param>
        /// <param name="id">An id created by the system that can be used for unique identification.</param>
        /// <param name="createdTimeStamp">A timestamp when snapshot was created that will automatically filled out, if neccessary.</param>
        /// <param name="creator">An id related to the creator that is filled out autmatically.</param>
        /// <param name="ident">An optional title/ident for the run. If not provided, a generated ident will be used.</param>
        /// <param name="nodes">The list of nodes (required).</param>
        /// <param name="resources">The list of resoruces (required).</param>
        /// <param name="nodeRelations">The list of relations.</param>
        /// <param name="elementConnections">The list of connections.</param>
        /// <param name="optimizationOptions">optimizationOptions.</param>
        /// <param name="coreBuildOptions">coreBuildOptions.</param>
        /// <param name="solution">solution.</param>
        /// <param name="extension">extension.</param>
        public RestOptimization(OptimizationStatus optimizationStatus = default(OptimizationStatus), string id = default(string), long createdTimeStamp = default(long), string creator = default(string), string ident = default(string), List<Node> nodes = default(List<Node>), List<Resource> resources = default(List<Resource>), List<NodeRelation> nodeRelations = default(List<NodeRelation>), List<ElementConnection> elementConnections = default(List<ElementConnection>), OptimizationOptions optimizationOptions = default(OptimizationOptions), CoreBuildOptions coreBuildOptions = default(CoreBuildOptions), Solution solution = default(Solution), JSONConfig extension = default(JSONConfig))
        {
            // to ensure "nodes" is required (not null)
            if (nodes == null)
            {
                throw new ArgumentNullException("nodes is a required property for RestOptimization and cannot be null");
            }
            this.Nodes = nodes;
            // to ensure "resources" is required (not null)
            if (resources == null)
            {
                throw new ArgumentNullException("resources is a required property for RestOptimization and cannot be null");
            }
            this.Resources = resources;
            this.OptimizationStatus = optimizationStatus;
            this.Id = id;
            this.CreatedTimeStamp = createdTimeStamp;
            this.Creator = creator;
            this.Ident = ident;
            this.NodeRelations = nodeRelations;
            this.ElementConnections = elementConnections;
            this.OptimizationOptions = optimizationOptions;
            this.CoreBuildOptions = coreBuildOptions;
            this.Solution = solution;
            this.Extension = extension;
        }

        /// <summary>
        /// Gets or Sets OptimizationStatus
        /// </summary>
        [DataMember(Name = "optimizationStatus", EmitDefaultValue = false)]
        public OptimizationStatus OptimizationStatus { get; set; }

        /// <summary>
        /// An id created by the system that can be used for unique identification
        /// </summary>
        /// <value>An id created by the system that can be used for unique identification</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp when snapshot was created that will automatically filled out, if neccessary
        /// </summary>
        /// <value>A timestamp when snapshot was created that will automatically filled out, if neccessary</value>
        [DataMember(Name = "createdTimeStamp", EmitDefaultValue = false)]
        public long CreatedTimeStamp { get; set; }

        /// <summary>
        /// An id related to the creator that is filled out autmatically
        /// </summary>
        /// <value>An id related to the creator that is filled out autmatically</value>
        [DataMember(Name = "creator", EmitDefaultValue = false)]
        public string Creator { get; set; }

        /// <summary>
        /// An optional title/ident for the run. If not provided, a generated ident will be used
        /// </summary>
        /// <value>An optional title/ident for the run. If not provided, a generated ident will be used</value>
        [DataMember(Name = "ident", EmitDefaultValue = false)]
        public string Ident { get; set; }

        /// <summary>
        /// The list of nodes
        /// </summary>
        /// <value>The list of nodes</value>
        [DataMember(Name = "nodes", IsRequired = true, EmitDefaultValue = false)]
        public List<Node> Nodes { get; set; }

        /// <summary>
        /// The list of resoruces
        /// </summary>
        /// <value>The list of resoruces</value>
        [DataMember(Name = "resources", IsRequired = true, EmitDefaultValue = false)]
        public List<Resource> Resources { get; set; }

        /// <summary>
        /// The list of relations
        /// </summary>
        /// <value>The list of relations</value>
        [DataMember(Name = "nodeRelations", EmitDefaultValue = false)]
        public List<NodeRelation> NodeRelations { get; set; }

        /// <summary>
        /// The list of connections
        /// </summary>
        /// <value>The list of connections</value>
        [DataMember(Name = "elementConnections", EmitDefaultValue = false)]
        public List<ElementConnection> ElementConnections { get; set; }

        /// <summary>
        /// Gets or Sets OptimizationOptions
        /// </summary>
        [DataMember(Name = "optimizationOptions", EmitDefaultValue = false)]
        public OptimizationOptions OptimizationOptions { get; set; }

        /// <summary>
        /// Gets or Sets CoreBuildOptions
        /// </summary>
        [DataMember(Name = "coreBuildOptions", EmitDefaultValue = false)]
        public CoreBuildOptions CoreBuildOptions { get; set; }

        /// <summary>
        /// Gets or Sets Solution
        /// </summary>
        [DataMember(Name = "solution", EmitDefaultValue = false)]
        public Solution Solution { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name = "extension", EmitDefaultValue = false)]
        public JSONConfig Extension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestOptimization {\n");
            sb.Append("  OptimizationStatus: ").Append(OptimizationStatus).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedTimeStamp: ").Append(CreatedTimeStamp).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Ident: ").Append(Ident).Append("\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  NodeRelations: ").Append(NodeRelations).Append("\n");
            sb.Append("  ElementConnections: ").Append(ElementConnections).Append("\n");
            sb.Append("  OptimizationOptions: ").Append(OptimizationOptions).Append("\n");
            sb.Append("  CoreBuildOptions: ").Append(CoreBuildOptions).Append("\n");
            sb.Append("  Solution: ").Append(Solution).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestOptimization);
        }

        /// <summary>
        /// Returns true if RestOptimization instances are equal
        /// </summary>
        /// <param name="input">Instance of RestOptimization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestOptimization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OptimizationStatus == input.OptimizationStatus ||
                    (this.OptimizationStatus != null &&
                    this.OptimizationStatus.Equals(input.OptimizationStatus))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedTimeStamp == input.CreatedTimeStamp ||
                    this.CreatedTimeStamp.Equals(input.CreatedTimeStamp)
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Ident == input.Ident ||
                    (this.Ident != null &&
                    this.Ident.Equals(input.Ident))
                ) && 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.NodeRelations == input.NodeRelations ||
                    this.NodeRelations != null &&
                    input.NodeRelations != null &&
                    this.NodeRelations.SequenceEqual(input.NodeRelations)
                ) && 
                (
                    this.ElementConnections == input.ElementConnections ||
                    this.ElementConnections != null &&
                    input.ElementConnections != null &&
                    this.ElementConnections.SequenceEqual(input.ElementConnections)
                ) && 
                (
                    this.OptimizationOptions == input.OptimizationOptions ||
                    (this.OptimizationOptions != null &&
                    this.OptimizationOptions.Equals(input.OptimizationOptions))
                ) && 
                (
                    this.CoreBuildOptions == input.CoreBuildOptions ||
                    (this.CoreBuildOptions != null &&
                    this.CoreBuildOptions.Equals(input.CoreBuildOptions))
                ) && 
                (
                    this.Solution == input.Solution ||
                    (this.Solution != null &&
                    this.Solution.Equals(input.Solution))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OptimizationStatus != null)
                {
                    hashCode = (hashCode * 59) + this.OptimizationStatus.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedTimeStamp.GetHashCode();
                if (this.Creator != null)
                {
                    hashCode = (hashCode * 59) + this.Creator.GetHashCode();
                }
                if (this.Ident != null)
                {
                    hashCode = (hashCode * 59) + this.Ident.GetHashCode();
                }
                if (this.Nodes != null)
                {
                    hashCode = (hashCode * 59) + this.Nodes.GetHashCode();
                }
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                if (this.NodeRelations != null)
                {
                    hashCode = (hashCode * 59) + this.NodeRelations.GetHashCode();
                }
                if (this.ElementConnections != null)
                {
                    hashCode = (hashCode * 59) + this.ElementConnections.GetHashCode();
                }
                if (this.OptimizationOptions != null)
                {
                    hashCode = (hashCode * 59) + this.OptimizationOptions.GetHashCode();
                }
                if (this.CoreBuildOptions != null)
                {
                    hashCode = (hashCode * 59) + this.CoreBuildOptions.GetHashCode();
                }
                if (this.Solution != null)
                {
                    hashCode = (hashCode * 59) + this.Solution.GetHashCode();
                }
                if (this.Extension != null)
                {
                    hashCode = (hashCode * 59) + this.Extension.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
