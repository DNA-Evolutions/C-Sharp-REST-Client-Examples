/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-SNAPSHOT)
 *
 * The version of the OpenAPI document: 1.2.1-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The list of non-overlapping openingHours of the nodes.
    /// </summary>
    [DataContract(Name = "OpeningHours")]
    public partial class OpeningHours : IEquatable<OpeningHours>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpeningHours" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpeningHours() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpeningHours" /> class.
        /// </summary>
        /// <param name="begin">The begin of the Opening Hour (required).</param>
        /// <param name="end">The end of the Opening Hour (required).</param>
        /// <param name="zoneId">The zoneId of the Opening Hour (required).</param>
        /// <param name="serviceHoursOffsets">The serviceHoursOffsets.</param>
        /// <param name="isPreffered">The isPreffered boolean. If an Opening Hour is preffered the Optimizer will try to visit the node inside this Opening Hour. By default, the first Openinghour of a node is the preffered opening hour. (default to false).</param>
        /// <param name="isSoloAccessHours">The isSoloAccessHours (default to false).</param>
        public OpeningHours(DateTime begin = default(DateTime), DateTime end = default(DateTime), string zoneId = default(string), List<LongLongPair> serviceHoursOffsets = default(List<LongLongPair>), bool? isPreffered = false, bool? isSoloAccessHours = false)
        {
            this.Begin = begin;
            this.End = end;
            // to ensure "zoneId" is required (not null)
            if (zoneId == null)
            {
                throw new ArgumentNullException("zoneId is a required property for OpeningHours and cannot be null");
            }
            this.ZoneId = zoneId;
            this.ServiceHoursOffsets = serviceHoursOffsets;
            // use default value if no "isPreffered" provided
            this.IsPreffered = isPreffered ?? false;
            // use default value if no "isSoloAccessHours" provided
            this.IsSoloAccessHours = isSoloAccessHours ?? false;
        }

        /// <summary>
        /// The begin of the Opening Hour
        /// </summary>
        /// <value>The begin of the Opening Hour</value>
        [DataMember(Name = "begin", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Begin { get; set; }

        /// <summary>
        /// The end of the Opening Hour
        /// </summary>
        /// <value>The end of the Opening Hour</value>
        [DataMember(Name = "end", IsRequired = true, EmitDefaultValue = false)]
        public DateTime End { get; set; }

        /// <summary>
        /// The zoneId of the Opening Hour
        /// </summary>
        /// <value>The zoneId of the Opening Hour</value>
        [DataMember(Name = "zoneId", IsRequired = true, EmitDefaultValue = false)]
        public string ZoneId { get; set; }

        /// <summary>
        /// The serviceHoursOffsets
        /// </summary>
        /// <value>The serviceHoursOffsets</value>
        [DataMember(Name = "serviceHoursOffsets", EmitDefaultValue = false)]
        public List<LongLongPair> ServiceHoursOffsets { get; set; }

        /// <summary>
        /// The isPreffered boolean. If an Opening Hour is preffered the Optimizer will try to visit the node inside this Opening Hour. By default, the first Openinghour of a node is the preffered opening hour.
        /// </summary>
        /// <value>The isPreffered boolean. If an Opening Hour is preffered the Optimizer will try to visit the node inside this Opening Hour. By default, the first Openinghour of a node is the preffered opening hour.</value>
        [DataMember(Name = "isPreffered", EmitDefaultValue = true)]
        public bool? IsPreffered { get; set; }

        /// <summary>
        /// The isSoloAccessHours
        /// </summary>
        /// <value>The isSoloAccessHours</value>
        [DataMember(Name = "isSoloAccessHours", EmitDefaultValue = true)]
        public bool? IsSoloAccessHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpeningHours {\n");
            sb.Append("  Begin: ").Append(Begin).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ZoneId: ").Append(ZoneId).Append("\n");
            sb.Append("  ServiceHoursOffsets: ").Append(ServiceHoursOffsets).Append("\n");
            sb.Append("  IsPreffered: ").Append(IsPreffered).Append("\n");
            sb.Append("  IsSoloAccessHours: ").Append(IsSoloAccessHours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpeningHours);
        }

        /// <summary>
        /// Returns true if OpeningHours instances are equal
        /// </summary>
        /// <param name="input">Instance of OpeningHours to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpeningHours input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Begin == input.Begin ||
                    (this.Begin != null &&
                    this.Begin.Equals(input.Begin))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ZoneId == input.ZoneId ||
                    (this.ZoneId != null &&
                    this.ZoneId.Equals(input.ZoneId))
                ) && 
                (
                    this.ServiceHoursOffsets == input.ServiceHoursOffsets ||
                    this.ServiceHoursOffsets != null &&
                    input.ServiceHoursOffsets != null &&
                    this.ServiceHoursOffsets.SequenceEqual(input.ServiceHoursOffsets)
                ) && 
                (
                    this.IsPreffered == input.IsPreffered ||
                    (this.IsPreffered != null &&
                    this.IsPreffered.Equals(input.IsPreffered))
                ) && 
                (
                    this.IsSoloAccessHours == input.IsSoloAccessHours ||
                    (this.IsSoloAccessHours != null &&
                    this.IsSoloAccessHours.Equals(input.IsSoloAccessHours))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Begin != null)
                {
                    hashCode = (hashCode * 59) + this.Begin.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                if (this.ZoneId != null)
                {
                    hashCode = (hashCode * 59) + this.ZoneId.GetHashCode();
                }
                if (this.ServiceHoursOffsets != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceHoursOffsets.GetHashCode();
                }
                if (this.IsPreffered != null)
                {
                    hashCode = (hashCode * 59) + this.IsPreffered.GetHashCode();
                }
                if (this.IsSoloAccessHours != null)
                {
                    hashCode = (hashCode * 59) + this.IsSoloAccessHours.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
