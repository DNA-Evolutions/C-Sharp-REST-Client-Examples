/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc2-j17)
 *
 * The version of the OpenAPI document: 1.2.8-alpha-SNAPSHOT)
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The list of relations
    /// </summary>
    [DataContract(Name = "NodeRelation")]
    public partial class NodeRelation : IValidatableObject
    {
        /// <summary>
        /// The relationMode
        /// </summary>
        /// <value>The relationMode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationModeEnum
        {
            /// <summary>
            /// Enum STRONG for value: STRONG
            /// </summary>
            [EnumMember(Value = "STRONG")]
            STRONG = 1,

            /// <summary>
            /// Enum WEAK for value: WEAK
            /// </summary>
            [EnumMember(Value = "WEAK")]
            WEAK = 2,

            /// <summary>
            /// Enum WEAKTOMATER for value: WEAK_TO_MATER
            /// </summary>
            [EnumMember(Value = "WEAK_TO_MATER")]
            WEAKTOMATER = 3,

            /// <summary>
            /// Enum WEAKTORELATED for value: WEAK_TO_RELATED
            /// </summary>
            [EnumMember(Value = "WEAK_TO_RELATED")]
            WEAKTORELATED = 4
        }


        /// <summary>
        /// The relationMode
        /// </summary>
        /// <value>The relationMode</value>
        [DataMember(Name = "relationMode", EmitDefaultValue = false)]
        public RelationModeEnum? RelationMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRelation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NodeRelation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeRelation" /> class.
        /// </summary>
        /// <param name="masterNodeId">The masterNodeId (required).</param>
        /// <param name="relatedNodeIds">The relatedNodeIds (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="relationMode">The relationMode.</param>
        public NodeRelation(string masterNodeId = default(string), List<string> relatedNodeIds = default(List<string>), NodeRelationType type = default(NodeRelationType), RelationModeEnum? relationMode = default(RelationModeEnum?))
        {
            // to ensure "masterNodeId" is required (not null)
            if (masterNodeId == null)
            {
                throw new ArgumentNullException("masterNodeId is a required property for NodeRelation and cannot be null");
            }
            this.MasterNodeId = masterNodeId;
            // to ensure "relatedNodeIds" is required (not null)
            if (relatedNodeIds == null)
            {
                throw new ArgumentNullException("relatedNodeIds is a required property for NodeRelation and cannot be null");
            }
            this.RelatedNodeIds = relatedNodeIds;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for NodeRelation and cannot be null");
            }
            this.Type = type;
            this.RelationMode = relationMode;
        }

        /// <summary>
        /// The masterNodeId
        /// </summary>
        /// <value>The masterNodeId</value>
        [DataMember(Name = "masterNodeId", IsRequired = true, EmitDefaultValue = true)]
        public string MasterNodeId { get; set; }

        /// <summary>
        /// The relatedNodeIds
        /// </summary>
        /// <value>The relatedNodeIds</value>
        [DataMember(Name = "relatedNodeIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> RelatedNodeIds { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public NodeRelationType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeRelation {\n");
            sb.Append("  MasterNodeId: ").Append(MasterNodeId).Append("\n");
            sb.Append("  RelatedNodeIds: ").Append(RelatedNodeIds).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RelationMode: ").Append(RelationMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
