/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc3-j17-SNAPSHOT)
 *
 * The version of the OpenAPI document: unknown
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JOptOptimizationProgress model for the documentation
    /// </summary>
    [DataContract(Name = "JOptOptimizationProgress")]
    public partial class JOptOptimizationProgress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JOptOptimizationProgress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JOptOptimizationProgress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JOptOptimizationProgress" /> class.
        /// </summary>
        /// <param name="id">The obejct id. Will be filled out by the optimizer, if necessary.</param>
        /// <param name="creator">An id related to the creator that is filled out autmatically.</param>
        /// <param name="ident">The ident of the currently running optimization (required).</param>
        /// <param name="callerId">The id of the currently running optimization algorithm (required).</param>
        /// <param name="curProgress">The progress in percentage of the currently running optimization algorithm (required).</param>
        /// <param name="curCost">The current cost of the currently running optimization algorithm (required).</param>
        /// <param name="stage">The stage of the optimization. The first running algorithm will get the stage 0. (required).</param>
        /// <param name="desc">The progress as human readable description (required).</param>
        /// <param name="expireAt">Optional value that will be used for database cleanup purposes..</param>
        public JOptOptimizationProgress(string id = default(string), string creator = default(string), string ident = default(string), string callerId = default(string), double curProgress = default(double), double curCost = default(double), int stage = default(int), string desc = default(string), DateTime expireAt = default(DateTime))
        {
            // to ensure "ident" is required (not null)
            if (ident == null)
            {
                throw new ArgumentNullException("ident is a required property for JOptOptimizationProgress and cannot be null");
            }
            this.Ident = ident;
            // to ensure "callerId" is required (not null)
            if (callerId == null)
            {
                throw new ArgumentNullException("callerId is a required property for JOptOptimizationProgress and cannot be null");
            }
            this.CallerId = callerId;
            this.CurProgress = curProgress;
            this.CurCost = curCost;
            this.Stage = stage;
            // to ensure "desc" is required (not null)
            if (desc == null)
            {
                throw new ArgumentNullException("desc is a required property for JOptOptimizationProgress and cannot be null");
            }
            this.Desc = desc;
            this.Id = id;
            this.Creator = creator;
            this.ExpireAt = expireAt;
        }

        /// <summary>
        /// The obejct id. Will be filled out by the optimizer, if necessary
        /// </summary>
        /// <value>The obejct id. Will be filled out by the optimizer, if necessary</value>
        /*
        <example> 626d49ae5cf422297561c458</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// An id related to the creator that is filled out autmatically
        /// </summary>
        /// <value>An id related to the creator that is filled out autmatically</value>
        /*
        <example>11aa65b13c2a6d34f8727e82e403ce869e3bba1d35c45c595e8cc5ce5e74e57a</example>
        */
        [DataMember(Name = "creator", EmitDefaultValue = false)]
        public string Creator { get; set; }

        /// <summary>
        /// The ident of the currently running optimization
        /// </summary>
        /// <value>The ident of the currently running optimization</value>
        /*
        <example>My-JOpt-Run</example>
        */
        [DataMember(Name = "ident", IsRequired = true, EmitDefaultValue = true)]
        public string Ident { get; set; }

        /// <summary>
        /// The id of the currently running optimization algorithm
        /// </summary>
        /// <value>The id of the currently running optimization algorithm</value>
        /*
        <example>GeneticEvolution</example>
        */
        [DataMember(Name = "callerId", IsRequired = true, EmitDefaultValue = true)]
        public string CallerId { get; set; }

        /// <summary>
        /// The progress in percentage of the currently running optimization algorithm
        /// </summary>
        /// <value>The progress in percentage of the currently running optimization algorithm</value>
        /*
        <example>89.0</example>
        */
        [DataMember(Name = "curProgress", IsRequired = true, EmitDefaultValue = true)]
        public double CurProgress { get; set; }

        /// <summary>
        /// The current cost of the currently running optimization algorithm
        /// </summary>
        /// <value>The current cost of the currently running optimization algorithm</value>
        /*
        <example>1100.0</example>
        */
        [DataMember(Name = "curCost", IsRequired = true, EmitDefaultValue = true)]
        public double CurCost { get; set; }

        /// <summary>
        /// The stage of the optimization. The first running algorithm will get the stage 0.
        /// </summary>
        /// <value>The stage of the optimization. The first running algorithm will get the stage 0.</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "stage", IsRequired = true, EmitDefaultValue = true)]
        public int Stage { get; set; }

        /// <summary>
        /// The progress as human readable description
        /// </summary>
        /// <value>The progress as human readable description</value>
        /*
        <example>PC 89.0, RE 1, AL GeneticEvolution, JC 4258.106994896875, RC 4, EC 10, TC 14, TT[h] 24, TU[%] 13, TD[km] 1647.29</example>
        */
        [DataMember(Name = "desc", IsRequired = true, EmitDefaultValue = true)]
        public string Desc { get; set; }

        /// <summary>
        /// Optional value that will be used for database cleanup purposes.
        /// </summary>
        /// <value>Optional value that will be used for database cleanup purposes.</value>
        [DataMember(Name = "expireAt", EmitDefaultValue = false)]
        public DateTime ExpireAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JOptOptimizationProgress {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Ident: ").Append(Ident).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  CurProgress: ").Append(CurProgress).Append("\n");
            sb.Append("  CurCost: ").Append(CurCost).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  ExpireAt: ").Append(ExpireAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
