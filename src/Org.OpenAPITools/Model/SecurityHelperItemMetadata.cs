/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc3-j17-SNAPSHOT)
 *
 * The version of the OpenAPI document: unknown
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SecurityHelperItemMetadata model for encrypted data
    /// </summary>
    [DataContract(Name = "SecurityHelperItemMetadata")]
    public partial class SecurityHelperItemMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityHelperItemMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityHelperItemMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityHelperItemMetadata" /> class.
        /// </summary>
        /// <param name="iv">The iv vector used for initiailization the encryption as base 64 encoded String. (required).</param>
        /// <param name="salt">The salt used for initiailization as base 64 encoded String. (required).</param>
        /// <param name="encAlgo">The algorithm used for encryption. (required).</param>
        /// <param name="secretKeyFacAlgo">Secret Key Factory algorithm. (required).</param>
        /// <param name="secretKeySpecAlgo">Secret Key Factory algorithm spec. (required).</param>
        public SecurityHelperItemMetadata(string iv = default(string), string salt = default(string), string encAlgo = default(string), string secretKeyFacAlgo = default(string), string secretKeySpecAlgo = default(string))
        {
            // to ensure "iv" is required (not null)
            if (iv == null)
            {
                throw new ArgumentNullException("iv is a required property for SecurityHelperItemMetadata and cannot be null");
            }
            this.Iv = iv;
            // to ensure "salt" is required (not null)
            if (salt == null)
            {
                throw new ArgumentNullException("salt is a required property for SecurityHelperItemMetadata and cannot be null");
            }
            this.Salt = salt;
            // to ensure "encAlgo" is required (not null)
            if (encAlgo == null)
            {
                throw new ArgumentNullException("encAlgo is a required property for SecurityHelperItemMetadata and cannot be null");
            }
            this.EncAlgo = encAlgo;
            // to ensure "secretKeyFacAlgo" is required (not null)
            if (secretKeyFacAlgo == null)
            {
                throw new ArgumentNullException("secretKeyFacAlgo is a required property for SecurityHelperItemMetadata and cannot be null");
            }
            this.SecretKeyFacAlgo = secretKeyFacAlgo;
            // to ensure "secretKeySpecAlgo" is required (not null)
            if (secretKeySpecAlgo == null)
            {
                throw new ArgumentNullException("secretKeySpecAlgo is a required property for SecurityHelperItemMetadata and cannot be null");
            }
            this.SecretKeySpecAlgo = secretKeySpecAlgo;
        }

        /// <summary>
        /// The iv vector used for initiailization the encryption as base 64 encoded String.
        /// </summary>
        /// <value>The iv vector used for initiailization the encryption as base 64 encoded String.</value>
        /*
        <example>5ma7QWV7rNhHIimS8X2KtA&#x3D;&#x3D;</example>
        */
        [DataMember(Name = "iv", IsRequired = true, EmitDefaultValue = true)]
        public string Iv { get; set; }

        /// <summary>
        /// The salt used for initiailization as base 64 encoded String.
        /// </summary>
        /// <value>The salt used for initiailization as base 64 encoded String.</value>
        /*
        <example>YCJPJNCeDQW2u2a8Stx4+g&#x3D;&#x3D;</example>
        */
        [DataMember(Name = "salt", IsRequired = true, EmitDefaultValue = true)]
        public string Salt { get; set; }

        /// <summary>
        /// The algorithm used for encryption.
        /// </summary>
        /// <value>The algorithm used for encryption.</value>
        /*
        <example>AES/GCM/NoPadding</example>
        */
        [DataMember(Name = "encAlgo", IsRequired = true, EmitDefaultValue = true)]
        public string EncAlgo { get; set; }

        /// <summary>
        /// Secret Key Factory algorithm.
        /// </summary>
        /// <value>Secret Key Factory algorithm.</value>
        /*
        <example>PBKDF2WithHmacSHA256</example>
        */
        [DataMember(Name = "secretKeyFacAlgo", IsRequired = true, EmitDefaultValue = true)]
        public string SecretKeyFacAlgo { get; set; }

        /// <summary>
        /// Secret Key Factory algorithm spec.
        /// </summary>
        /// <value>Secret Key Factory algorithm spec.</value>
        /*
        <example>AES</example>
        */
        [DataMember(Name = "secretKeySpecAlgo", IsRequired = true, EmitDefaultValue = true)]
        public string SecretKeySpecAlgo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityHelperItemMetadata {\n");
            sb.Append("  Iv: ").Append(Iv).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  EncAlgo: ").Append(EncAlgo).Append("\n");
            sb.Append("  SecretKeyFacAlgo: ").Append(SecretKeyFacAlgo).Append("\n");
            sb.Append("  SecretKeySpecAlgo: ").Append(SecretKeySpecAlgo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
