/*
 * DNA Evolutions - JOpt.TourOptimizer
 *
 * This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-SNAPSHOT)
 *
 * The version of the OpenAPI document: 1.2.1-SNAPSHOT
 * Contact: info@dna-evolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Org.OpenAPITools.Client.FileParameter;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Location parameters that can support geographical routing.
    /// </summary>
    [DataContract(Name = "LocationParameters")]
    public partial class LocationParameters : IEquatable<LocationParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationParameters" /> class.
        /// </summary>
        /// <param name="layers">The layers in which the location can be detected. Use &#39;auto&#39; for automatically selecting the best (highest confidence) layer..</param>
        /// <param name="size">The number of layers the location can be related to. Further, in case of a query the number of results that might be found/desired..</param>
        /// <param name="radius">The number of meters about this input location within which edges (roads between intersections) will be considered as candidates for said location. When correlating this location to the route network, try to only return results within this distance (meters) from this location. If there are no candidates within this distance it will return the closest candidate within reason. If this value is larger than the configured service limit it will be clamped to that limit. The default is 20 meters..</param>
        /// <param name="sources">If you use the sources parameter, you can choose which of these data sources to include in your search. So if you&#39;re only interested in finding an address in data from OpenAddresses, for example, you can build a query specifying that data source &#39;oa&#39;. (OpenAddresses&#x3D;&#39;oa&#39;, OpenstreetMap &#x3D; &#39;osm&#39;, Who&#39;s on First &#x3D;&#39;wof&#39;,GeoNames&#x3D;&#39;gn&#39; ). If, for example, OpenAddresses and OpenstreetMap is desired use &#39;osm,oa&#39;. Default is &#39;all&#39; .</param>
        public LocationParameters(string layers = default(string), int size = default(int), double radius = default(double), string sources = default(string))
        {
            this.Layers = layers;
            this.Size = size;
            this.Radius = radius;
            this.Sources = sources;
        }

        /// <summary>
        /// The layers in which the location can be detected. Use &#39;auto&#39; for automatically selecting the best (highest confidence) layer.
        /// </summary>
        /// <value>The layers in which the location can be detected. Use &#39;auto&#39; for automatically selecting the best (highest confidence) layer.</value>
        [DataMember(Name = "layers", EmitDefaultValue = false)]
        public string Layers { get; set; }

        /// <summary>
        /// The number of layers the location can be related to. Further, in case of a query the number of results that might be found/desired.
        /// </summary>
        /// <value>The number of layers the location can be related to. Further, in case of a query the number of results that might be found/desired.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// The number of meters about this input location within which edges (roads between intersections) will be considered as candidates for said location. When correlating this location to the route network, try to only return results within this distance (meters) from this location. If there are no candidates within this distance it will return the closest candidate within reason. If this value is larger than the configured service limit it will be clamped to that limit. The default is 20 meters.
        /// </summary>
        /// <value>The number of meters about this input location within which edges (roads between intersections) will be considered as candidates for said location. When correlating this location to the route network, try to only return results within this distance (meters) from this location. If there are no candidates within this distance it will return the closest candidate within reason. If this value is larger than the configured service limit it will be clamped to that limit. The default is 20 meters.</value>
        [DataMember(Name = "radius", EmitDefaultValue = false)]
        public double Radius { get; set; }

        /// <summary>
        /// If you use the sources parameter, you can choose which of these data sources to include in your search. So if you&#39;re only interested in finding an address in data from OpenAddresses, for example, you can build a query specifying that data source &#39;oa&#39;. (OpenAddresses&#x3D;&#39;oa&#39;, OpenstreetMap &#x3D; &#39;osm&#39;, Who&#39;s on First &#x3D;&#39;wof&#39;,GeoNames&#x3D;&#39;gn&#39; ). If, for example, OpenAddresses and OpenstreetMap is desired use &#39;osm,oa&#39;. Default is &#39;all&#39; 
        /// </summary>
        /// <value>If you use the sources parameter, you can choose which of these data sources to include in your search. So if you&#39;re only interested in finding an address in data from OpenAddresses, for example, you can build a query specifying that data source &#39;oa&#39;. (OpenAddresses&#x3D;&#39;oa&#39;, OpenstreetMap &#x3D; &#39;osm&#39;, Who&#39;s on First &#x3D;&#39;wof&#39;,GeoNames&#x3D;&#39;gn&#39; ). If, for example, OpenAddresses and OpenstreetMap is desired use &#39;osm,oa&#39;. Default is &#39;all&#39; </value>
        [DataMember(Name = "sources", EmitDefaultValue = false)]
        public string Sources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationParameters {\n");
            sb.Append("  Layers: ").Append(Layers).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationParameters);
        }

        /// <summary>
        /// Returns true if LocationParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Layers == input.Layers ||
                    (this.Layers != null &&
                    this.Layers.Equals(input.Layers))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Radius == input.Radius ||
                    this.Radius.Equals(input.Radius)
                ) && 
                (
                    this.Sources == input.Sources ||
                    (this.Sources != null &&
                    this.Sources.Equals(input.Sources))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Layers != null)
                {
                    hashCode = (hashCode * 59) + this.Layers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                hashCode = (hashCode * 59) + this.Radius.GetHashCode();
                if (this.Sources != null)
                {
                    hashCode = (hashCode * 59) + this.Sources.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
